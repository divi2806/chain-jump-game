"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383";
exports.ids = ["vendor-chunks/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/actions/reconnect.js":
/*!************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/actions/reconnect.js ***!
  \************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   reconnect: () => (/* binding */ reconnect)\n/* harmony export */ });\nlet isReconnecting = false;\n/** https://wagmi.sh/core/api/actions/reconnect */ async function reconnect(config, parameters = {}) {\n    // If already reconnecting, do nothing\n    if (isReconnecting) return [];\n    isReconnecting = true;\n    config.setState((x)=>({\n            ...x,\n            status: x.current ? \"reconnecting\" : \"connecting\"\n        }));\n    const connectors = [];\n    if (parameters.connectors?.length) {\n        for (const connector_ of parameters.connectors){\n            let connector;\n            // \"Register\" connector if not already created\n            if (typeof connector_ === \"function\") connector = config._internal.connectors.setup(connector_);\n            else connector = connector_;\n            connectors.push(connector);\n        }\n    } else connectors.push(...config.connectors);\n    // Try recently-used connectors first\n    let recentConnectorId;\n    try {\n        recentConnectorId = await config.storage?.getItem(\"recentConnectorId\");\n    } catch  {}\n    const scores = {};\n    for (const [, connection] of config.state.connections){\n        scores[connection.connector.id] = 1;\n    }\n    if (recentConnectorId) scores[recentConnectorId] = 0;\n    const sorted = Object.keys(scores).length > 0 ? [\n        ...connectors\n    ].sort((a, b)=>(scores[a.id] ?? 10) - (scores[b.id] ?? 10)) : connectors;\n    // Iterate through each connector and try to connect\n    let connected = false;\n    const connections = [];\n    const providers = [];\n    for (const connector of sorted){\n        const provider = await connector.getProvider().catch(()=>undefined);\n        if (!provider) continue;\n        // If we already have an instance of this connector's provider,\n        // then we have already checked it (ie. injected connectors can\n        // share the same `window.ethereum` instance, so we don't want to\n        // connect to it again).\n        if (providers.some((x)=>x === provider)) continue;\n        const isAuthorized = await connector.isAuthorized();\n        if (!isAuthorized) continue;\n        const data = await connector.connect({\n            isReconnecting: true\n        }).catch(()=>null);\n        if (!data) continue;\n        connector.emitter.off(\"connect\", config._internal.events.connect);\n        connector.emitter.on(\"change\", config._internal.events.change);\n        connector.emitter.on(\"disconnect\", config._internal.events.disconnect);\n        config.setState((x)=>{\n            const connections = new Map(connected ? x.connections : new Map()).set(connector.uid, {\n                accounts: data.accounts,\n                chainId: data.chainId,\n                connector\n            });\n            return {\n                ...x,\n                current: connected ? x.current : connector.uid,\n                connections\n            };\n        });\n        connections.push({\n            accounts: data.accounts,\n            chainId: data.chainId,\n            connector\n        });\n        providers.push(provider);\n        connected = true;\n    }\n    // Prevent overwriting connected status from race condition\n    if (config.state.status === \"reconnecting\" || config.state.status === \"connecting\") {\n        // If connecting didn't succeed, set to disconnected\n        if (!connected) config.setState((x)=>({\n                ...x,\n                connections: new Map(),\n                current: null,\n                status: \"disconnected\"\n            }));\n        else config.setState((x)=>({\n                ...x,\n                status: \"connected\"\n            }));\n    }\n    isReconnecting = false;\n    return connections;\n} //# sourceMappingURL=reconnect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdhZ21pK2NvcmVAMi4xOS4wX0B0YW5zdGFjaytxdWVyeS1jb3JlQDUuODUuM19AdHlwZXMrcmVhY3RAMTguMi4zN19yZWFjdEAxOC4yLjBfdHlwZXNjXzQwYzZiOTdhZjE5M2UzNGRiM2Q0YzAxOTMzMTQ0MzgzL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29yZS9kaXN0L2VzbS9hY3Rpb25zL3JlY29ubmVjdC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBSUEsaUJBQWlCO0FBQ3JCLGdEQUFnRCxHQUN6QyxlQUFlQyxVQUFVQyxNQUFNLEVBQUVDLGFBQWEsQ0FBQyxDQUFDO0lBQ25ELHNDQUFzQztJQUN0QyxJQUFJSCxnQkFDQSxPQUFPLEVBQUU7SUFDYkEsaUJBQWlCO0lBQ2pCRSxPQUFPRSxRQUFRLENBQUMsQ0FBQ0MsSUFBTztZQUNwQixHQUFHQSxDQUFDO1lBQ0pDLFFBQVFELEVBQUVFLE9BQU8sR0FBRyxpQkFBaUI7UUFDekM7SUFDQSxNQUFNQyxhQUFhLEVBQUU7SUFDckIsSUFBSUwsV0FBV0ssVUFBVSxFQUFFQyxRQUFRO1FBQy9CLEtBQUssTUFBTUMsY0FBY1AsV0FBV0ssVUFBVSxDQUFFO1lBQzVDLElBQUlHO1lBQ0osOENBQThDO1lBQzlDLElBQUksT0FBT0QsZUFBZSxZQUN0QkMsWUFBWVQsT0FBT1UsU0FBUyxDQUFDSixVQUFVLENBQUNLLEtBQUssQ0FBQ0g7aUJBRTlDQyxZQUFZRDtZQUNoQkYsV0FBV00sSUFBSSxDQUFDSDtRQUNwQjtJQUNKLE9BRUlILFdBQVdNLElBQUksSUFBSVosT0FBT00sVUFBVTtJQUN4QyxxQ0FBcUM7SUFDckMsSUFBSU87SUFDSixJQUFJO1FBQ0FBLG9CQUFvQixNQUFNYixPQUFPYyxPQUFPLEVBQUVDLFFBQVE7SUFDdEQsRUFDQSxPQUFNLENBQUU7SUFDUixNQUFNQyxTQUFTLENBQUM7SUFDaEIsS0FBSyxNQUFNLEdBQUdDLFdBQVcsSUFBSWpCLE9BQU9rQixLQUFL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ZXMvLnBucG0vQHdhZ21pK2NvcmVAMi4xOS4wX0B0YW5zdGFjaytxdWVyeS1jb3JlQDUuODUuM19AdHlwZXMrcmVhY3RAMTguMi4zN19yZWFjdEAxOC4yLjBfdHlwZXNjXzQwYzZiOTdhZjE5M2UzNGRiM2Q0YzAxOTMzMTQ0MzgzL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29yZS9kaXN0L2VzbS9hY3Rpb25zL3JlY29ubmVjdC5qcz82YzQzIl0sInNvdXJjZXNDb250ZW50IjpbImxldCBpc1JlY29ubmVjdGluZyA9IGZhbHNlO1xuLyoqIGh0dHBzOi8vd2FnbWkuc2gvY29yZS9hcGkvYWN0aW9ucy9yZWNvbm5lY3QgKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWNvbm5lY3QoY29uZmlnLCBwYXJhbWV0ZXJzID0ge30pIHtcbiAgICAvLyBJZiBhbHJlYWR5IHJlY29ubmVjdGluZywgZG8gbm90aGluZ1xuICAgIGlmIChpc1JlY29ubmVjdGluZylcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIGlzUmVjb25uZWN0aW5nID0gdHJ1ZTtcbiAgICBjb25maWcuc2V0U3RhdGUoKHgpID0+ICh7XG4gICAgICAgIC4uLngsXG4gICAgICAgIHN0YXR1czogeC5jdXJyZW50ID8gJ3JlY29ubmVjdGluZycgOiAnY29ubmVjdGluZycsXG4gICAgfSkpO1xuICAgIGNvbnN0IGNvbm5lY3RvcnMgPSBbXTtcbiAgICBpZiAocGFyYW1ldGVycy5jb25uZWN0b3JzPy5sZW5ndGgpIHtcbiAgICAgICAgZm9yIChjb25zdCBjb25uZWN0b3JfIG9mIHBhcmFtZXRlcnMuY29ubmVjdG9ycykge1xuICAgICAgICAgICAgbGV0IGNvbm5lY3RvcjtcbiAgICAgICAgICAgIC8vIFwiUmVnaXN0ZXJcIiBjb25uZWN0b3IgaWYgbm90IGFscmVhZHkgY3JlYXRlZFxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25uZWN0b3JfID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgICAgIGNvbm5lY3RvciA9IGNvbmZpZy5faW50ZXJuYWwuY29ubmVjdG9ycy5zZXR1cChjb25uZWN0b3JfKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBjb25uZWN0b3IgPSBjb25uZWN0b3JfO1xuICAgICAgICAgICAgY29ubmVjdG9ycy5wdXNoKGNvbm5lY3Rvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZVxuICAgICAgICBjb25uZWN0b3JzLnB1c2goLi4uY29uZmlnLmNvbm5lY3RvcnMpO1xuICAgIC8vIFRyeSByZWNlbnRseS11c2VkIGNvbm5lY3RvcnMgZmlyc3RcbiAgICBsZXQgcmVjZW50Q29ubmVjdG9ySWQ7XG4gICAgdHJ5IHtcbiAgICAgICAgcmVjZW50Q29ubmVjdG9ySWQgPSBhd2FpdCBjb25maWcuc3RvcmFnZT8uZ2V0SXRlbSgncmVjZW50Q29ubmVjdG9ySWQnKTtcbiAgICB9XG4gICAgY2F0Y2ggeyB9XG4gICAgY29uc3Qgc2NvcmVzID0ge307XG4gICAgZm9yIChjb25zdCBbLCBjb25uZWN0aW9uXSBvZiBjb25maWcuc3RhdGUuY29ubmVjdGlvbnMpIHtcbiAgICAgICAgc2NvcmVzW2Nvbm5lY3Rpb24uY29ubmVjdG9yLmlkXSA9IDE7XG4gICAgfVxuICAgIGlmIChyZWNlbnRDb25uZWN0b3JJZClcbiAgICAgICAgc2NvcmVzW3JlY2VudENvbm5lY3RvcklkXSA9IDA7XG4gICAgY29uc3Qgc29ydGVkID0gT2JqZWN0LmtleXMoc2NvcmVzKS5sZW5ndGggPiAwXG4gICAgICAgID8gLy8gLnRvU29ydGVkKClcbiAgICAgICAgICAgIFsuLi5jb25uZWN0b3JzXS5zb3J0KChhLCBiKSA9PiAoc2NvcmVzW2EuaWRdID8/IDEwKSAtIChzY29yZXNbYi5pZF0gPz8gMTApKVxuICAgICAgICA6IGNvbm5lY3RvcnM7XG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGVhY2ggY29ubmVjdG9yIGFuZCB0cnkgdG8gY29ubmVjdFxuICAgIGxldCBjb25uZWN0ZWQgPSBmYWxzZTtcbiAgICBjb25zdCBjb25uZWN0aW9ucyA9IFtdO1xuICAgIGNvbnN0IHByb3ZpZGVycyA9IFtdO1xuICAgIGZvciAoY29uc3QgY29ubmVjdG9yIG9mIHNvcnRlZCkge1xuICAgICAgICBjb25zdCBwcm92aWRlciA9IGF3YWl0IGNvbm5lY3Rvci5nZXRQcm92aWRlcigpLmNhdGNoKCgpID0+IHVuZGVmaW5lZCk7XG4gICAgICAgIGlmICghcHJvdmlkZXIpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgLy8gSWYgd2UgYWxyZWFkeSBoYXZlIGFuIGluc3RhbmNlIG9mIHRoaXMgY29ubmVjdG9yJ3MgcHJvdmlkZXIsXG4gICAgICAgIC8vIHRoZW4gd2UgaGF2ZSBhbHJlYWR5IGNoZWNrZWQgaXQgKGllLiBpbmplY3RlZCBjb25uZWN0b3JzIGNhblxuICAgICAgICAvLyBzaGFyZSB0aGUgc2FtZSBgd2luZG93LmV0aGVyZXVtYCBpbnN0YW5jZSwgc28gd2UgZG9uJ3Qgd2FudCB0b1xuICAgICAgICAvLyBjb25uZWN0IHRvIGl0IGFnYWluKS5cbiAgICAgICAgaWYgKHByb3ZpZGVycy5zb21lKCh4KSA9PiB4ID09PSBwcm92aWRlcikpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY29uc3QgaXNBdXRob3JpemVkID0gYXdhaXQgY29ubmVjdG9yLmlzQXV0aG9yaXplZCgpO1xuICAgICAgICBpZiAoIWlzQXV0aG9yaXplZClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgY29ubmVjdG9yXG4gICAgICAgICAgICAuY29ubmVjdCh7IGlzUmVjb25uZWN0aW5nOiB0cnVlIH0pXG4gICAgICAgICAgICAuY2F0Y2goKCkgPT4gbnVsbCk7XG4gICAgICAgIGlmICghZGF0YSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjb25uZWN0b3IuZW1pdHRlci5vZmYoJ2Nvbm5lY3QnLCBjb25maWcuX2ludGVybmFsLmV2ZW50cy5jb25uZWN0KTtcbiAgICAgICAgY29ubmVjdG9yLmVtaXR0ZXIub24oJ2NoYW5nZScsIGNvbmZpZy5faW50ZXJuYWwuZXZlbnRzLmNoYW5nZSk7XG4gICAgICAgIGNvbm5lY3Rvci5lbWl0dGVyLm9uKCdkaXNjb25uZWN0JywgY29uZmlnLl9pbnRlcm5hbC5ldmVudHMuZGlzY29ubmVjdCk7XG4gICAgICAgIGNvbmZpZy5zZXRTdGF0ZSgoeCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29ubmVjdGlvbnMgPSBuZXcgTWFwKGNvbm5lY3RlZCA/IHguY29ubmVjdGlvbnMgOiBuZXcgTWFwKCkpLnNldChjb25uZWN0b3IudWlkLCB7IGFjY291bnRzOiBkYXRhLmFjY291bnRzLCBjaGFpbklkOiBkYXRhLmNoYWluSWQsIGNvbm5lY3RvciB9KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ueCxcbiAgICAgICAgICAgICAgICBjdXJyZW50OiBjb25uZWN0ZWQgPyB4LmN1cnJlbnQgOiBjb25uZWN0b3IudWlkLFxuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbm5lY3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgYWNjb3VudHM6IGRhdGEuYWNjb3VudHMsXG4gICAgICAgICAgICBjaGFpbklkOiBkYXRhLmNoYWluSWQsXG4gICAgICAgICAgICBjb25uZWN0b3IsXG4gICAgICAgIH0pO1xuICAgICAgICBwcm92aWRlcnMucHVzaChwcm92aWRlcik7XG4gICAgICAgIGNvbm5lY3RlZCA9IHRydWU7XG4gICAgfVxuICAgIC8vIFByZXZlbnQgb3ZlcndyaXRpbmcgY29ubmVjdGVkIHN0YXR1cyBmcm9tIHJhY2UgY29uZGl0aW9uXG4gICAgaWYgKGNvbmZpZy5zdGF0ZS5zdGF0dXMgPT09ICdyZWNvbm5lY3RpbmcnIHx8XG4gICAgICAgIGNvbmZpZy5zdGF0ZS5zdGF0dXMgPT09ICdjb25uZWN0aW5nJykge1xuICAgICAgICAvLyBJZiBjb25uZWN0aW5nIGRpZG4ndCBzdWNjZWVkLCBzZXQgdG8gZGlzY29ubmVjdGVkXG4gICAgICAgIGlmICghY29ubmVjdGVkKVxuICAgICAgICAgICAgY29uZmlnLnNldFN0YXRlKCh4KSA9PiAoe1xuICAgICAgICAgICAgICAgIC4uLngsXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbnM6IG5ldyBNYXAoKSxcbiAgICAgICAgICAgICAgICBjdXJyZW50OiBudWxsLFxuICAgICAgICAgICAgICAgIHN0YXR1czogJ2Rpc2Nvbm5lY3RlZCcsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGNvbmZpZy5zZXRTdGF0ZSgoeCkgPT4gKHsgLi4ueCwgc3RhdHVzOiAnY29ubmVjdGVkJyB9KSk7XG4gICAgfVxuICAgIGlzUmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgcmV0dXJuIGNvbm5lY3Rpb25zO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVjb25uZWN0LmpzLm1hcCJdLCJuYW1lcyI6WyJpc1JlY29ubmVjdGluZyIsInJlY29ubmVjdCIsImNvbmZpZyIsInBhcmFtZXRlcnMiLCJzZXRTdGF0ZSIsIngiLCJzdGF0dXMiLCJjdXJyZW50IiwiY29ubmVjdG9ycyIsImxlbmd0aCIsImNvbm5lY3Rvcl8iLCJjb25uZWN0b3IiLCJfaW50ZXJuYWwiLCJzZXR1cCIsInB1c2giLCJyZWNlbnRDb25uZWN0b3JJZCIsInN0b3JhZ2UiLCJnZXRJdGVtIiwic2NvcmVzIiwiY29ubmVjdGlvbiIsInN0YXRlIiwiY29ubmVjdGlvbnMiLCJpZCIsInNvcnRlZCIsIk9iamVjdCIsImtleXMiLCJzb3J0IiwiYSIsImIiLCJjb25uZWN0ZWQiLCJwcm92aWRlcnMiLCJwcm92aWRlciIsImdldFByb3ZpZGVyIiwiY2F0Y2giLCJ1bmRlZmluZWQiLCJzb21lIiwiaXNBdXRob3JpemVkIiwiZGF0YSIsImNvbm5lY3QiLCJlbWl0dGVyIiwib2ZmIiwiZXZlbnRzIiwib24iLCJjaGFuZ2UiLCJkaXNjb25uZWN0IiwiTWFwIiwic2V0IiwidWlkIiwiYWNjb3VudHMiLCJjaGFpbklkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/actions/reconnect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/connectors/createConnector.js":
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/connectors/createConnector.js ***!
  \*********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createConnector: () => (/* binding */ createConnector)\n/* harmony export */ });\nfunction createConnector(createConnectorFn) {\n    return createConnectorFn;\n} //# sourceMappingURL=createConnector.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdhZ21pK2NvcmVAMi4xOS4wX0B0YW5zdGFjaytxdWVyeS1jb3JlQDUuODUuM19AdHlwZXMrcmVhY3RAMTguMi4zN19yZWFjdEAxOC4yLjBfdHlwZXNjXzQwYzZiOTdhZjE5M2UzNGRiM2Q0YzAxOTMzMTQ0MzgzL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29yZS9kaXN0L2VzbS9jb25uZWN0b3JzL2NyZWF0ZUNvbm5lY3Rvci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsZ0JBQWdCQyxpQkFBaUI7SUFDN0MsT0FBT0E7QUFDWCxFQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NwYWNlLWp1bXAtZ2FtZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ad2FnbWkrY29yZUAyLjE5LjBfQHRhbnN0YWNrK3F1ZXJ5LWNvcmVANS44NS4zX0B0eXBlcytyZWFjdEAxOC4yLjM3X3JlYWN0QDE4LjIuMF90eXBlc2NfNDBjNmI5N2FmMTkzZTM0ZGIzZDRjMDE5MzMxNDQzODMvbm9kZV9tb2R1bGVzL0B3YWdtaS9jb3JlL2Rpc3QvZXNtL2Nvbm5lY3RvcnMvY3JlYXRlQ29ubmVjdG9yLmpzPzg5MzMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3RvcihjcmVhdGVDb25uZWN0b3JGbikge1xuICAgIHJldHVybiBjcmVhdGVDb25uZWN0b3JGbjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZUNvbm5lY3Rvci5qcy5tYXAiXSwibmFtZXMiOlsiY3JlYXRlQ29ubmVjdG9yIiwiY3JlYXRlQ29ubmVjdG9yRm4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/connectors/createConnector.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/connectors/injected.js":
/*!**************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/connectors/injected.js ***!
  \**************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   injected: () => (/* binding */ injected)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/.pnpm/viem@2.33.3_bufferutil@4.0.9_typescript@5.2.2_utf-8-validate@5.0.10_zod@3.25.76/node_modules/viem/_esm/utils/address/getAddress.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/.pnpm/viem@2.33.3_bufferutil@4.0.9_typescript@5.2.2_utf-8-validate@5.0.10_zod@3.25.76/node_modules/viem/_esm/errors/rpc.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/.pnpm/viem@2.33.3_bufferutil@4.0.9_typescript@5.2.2_utf-8-validate@5.0.10_zod@3.25.76/node_modules/viem/_esm/utils/promise/withTimeout.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/.pnpm/viem@2.33.3_bufferutil@4.0.9_typescript@5.2.2_utf-8-validate@5.0.10_zod@3.25.76/node_modules/viem/_esm/utils/promise/withRetry.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/.pnpm/viem@2.33.3_bufferutil@4.0.9_typescript@5.2.2_utf-8-validate@5.0.10_zod@3.25.76/node_modules/viem/_esm/utils/encoding/toHex.js\");\n/* harmony import */ var _errors_config_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../errors/config.js */ \"(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/errors/config.js\");\n/* harmony import */ var _errors_connector_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors/connector.js */ \"(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/errors/connector.js\");\n/* harmony import */ var _createConnector_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createConnector.js */ \"(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/connectors/createConnector.js\");\n\n\n\n\ninjected.type = \"injected\";\nfunction injected(parameters = {}) {\n    const { shimDisconnect = true, unstable_shimAsyncInject } = parameters;\n    function getTarget() {\n        const target = parameters.target;\n        if (typeof target === \"function\") {\n            const result = target();\n            if (result) return result;\n        }\n        if (typeof target === \"object\") return target;\n        if (typeof target === \"string\") return {\n            ...targetMap[target] ?? {\n                id: target,\n                name: `${target[0].toUpperCase()}${target.slice(1)}`,\n                provider: `is${target[0].toUpperCase()}${target.slice(1)}`\n            }\n        };\n        return {\n            id: \"injected\",\n            name: \"Injected\",\n            provider (window1) {\n                return window1?.ethereum;\n            }\n        };\n    }\n    let accountsChanged;\n    let chainChanged;\n    let connect;\n    let disconnect;\n    return (0,_createConnector_js__WEBPACK_IMPORTED_MODULE_0__.createConnector)((config)=>({\n            get icon () {\n                return getTarget().icon;\n            },\n            get id () {\n                return getTarget().id;\n            },\n            get name () {\n                return getTarget().name;\n            },\n            /** @deprecated */ get supportsSimulation () {\n                return true;\n            },\n            type: injected.type,\n            async setup () {\n                const provider = await this.getProvider();\n                // Only start listening for events if `target` is set, otherwise `injected()` will also receive events\n                if (provider?.on && parameters.target) {\n                    if (!connect) {\n                        connect = this.onConnect.bind(this);\n                        provider.on(\"connect\", connect);\n                    }\n                    // We shouldn't need to listen for `'accountsChanged'` here since the `'connect'` event should suffice (and wallet shouldn't be connected yet).\n                    // Some wallets, like MetaMask, do not implement the `'connect'` event and overload `'accountsChanged'` instead.\n                    if (!accountsChanged) {\n                        accountsChanged = this.onAccountsChanged.bind(this);\n                        provider.on(\"accountsChanged\", accountsChanged);\n                    }\n                }\n            },\n            async connect ({ chainId, isReconnecting } = {}) {\n                const provider = await this.getProvider();\n                if (!provider) throw new _errors_connector_js__WEBPACK_IMPORTED_MODULE_1__.ProviderNotFoundError();\n                let accounts = [];\n                if (isReconnecting) accounts = await this.getAccounts().catch(()=>[]);\n                else if (shimDisconnect) {\n                    // Attempt to show another prompt for selecting account if `shimDisconnect` flag is enabled\n                    try {\n                        const permissions = await provider.request({\n                            method: \"wallet_requestPermissions\",\n                            params: [\n                                {\n                                    eth_accounts: {}\n                                }\n                            ]\n                        });\n                        accounts = permissions[0]?.caveats?.[0]?.value?.map((x)=>(0,viem__WEBPACK_IMPORTED_MODULE_2__.getAddress)(x));\n                        // `'wallet_requestPermissions'` can return a different order of accounts than `'eth_accounts'`\n                        // switch to `'eth_accounts'` ordering if more than one account is connected\n                        // https://github.com/wevm/wagmi/issues/4140\n                        if (accounts.length > 0) {\n                            const sortedAccounts = await this.getAccounts();\n                            accounts = sortedAccounts;\n                        }\n                    } catch (err) {\n                        const error = err;\n                        // Not all injected providers support `wallet_requestPermissions` (e.g. MetaMask iOS).\n                        // Only bubble up error if user rejects request\n                        if (error.code === viem__WEBPACK_IMPORTED_MODULE_3__.UserRejectedRequestError.code) throw new viem__WEBPACK_IMPORTED_MODULE_3__.UserRejectedRequestError(error);\n                        // Or prompt is already open\n                        if (error.code === viem__WEBPACK_IMPORTED_MODULE_3__.ResourceUnavailableRpcError.code) throw error;\n                    }\n                }\n                try {\n                    if (!accounts?.length && !isReconnecting) {\n                        const requestedAccounts = await provider.request({\n                            method: \"eth_requestAccounts\"\n                        });\n                        accounts = requestedAccounts.map((x)=>(0,viem__WEBPACK_IMPORTED_MODULE_2__.getAddress)(x));\n                    }\n                    // Manage EIP-1193 event listeners\n                    // https://eips.ethereum.org/EIPS/eip-1193#events\n                    if (connect) {\n                        provider.removeListener(\"connect\", connect);\n                        connect = undefined;\n                    }\n                    if (!accountsChanged) {\n                        accountsChanged = this.onAccountsChanged.bind(this);\n                        provider.on(\"accountsChanged\", accountsChanged);\n                    }\n                    if (!chainChanged) {\n                        chainChanged = this.onChainChanged.bind(this);\n                        provider.on(\"chainChanged\", chainChanged);\n                    }\n                    if (!disconnect) {\n                        disconnect = this.onDisconnect.bind(this);\n                        provider.on(\"disconnect\", disconnect);\n                    }\n                    // Switch to chain if provided\n                    let currentChainId = await this.getChainId();\n                    if (chainId && currentChainId !== chainId) {\n                        const chain = await this.switchChain({\n                            chainId\n                        }).catch((error)=>{\n                            if (error.code === viem__WEBPACK_IMPORTED_MODULE_3__.UserRejectedRequestError.code) throw error;\n                            return {\n                                id: currentChainId\n                            };\n                        });\n                        currentChainId = chain?.id ?? currentChainId;\n                    }\n                    // Remove disconnected shim if it exists\n                    if (shimDisconnect) await config.storage?.removeItem(`${this.id}.disconnected`);\n                    // Add connected shim if no target exists\n                    if (!parameters.target) await config.storage?.setItem(\"injected.connected\", true);\n                    return {\n                        accounts,\n                        chainId: currentChainId\n                    };\n                } catch (err) {\n                    const error = err;\n                    if (error.code === viem__WEBPACK_IMPORTED_MODULE_3__.UserRejectedRequestError.code) throw new viem__WEBPACK_IMPORTED_MODULE_3__.UserRejectedRequestError(error);\n                    if (error.code === viem__WEBPACK_IMPORTED_MODULE_3__.ResourceUnavailableRpcError.code) throw new viem__WEBPACK_IMPORTED_MODULE_3__.ResourceUnavailableRpcError(error);\n                    throw error;\n                }\n            },\n            async disconnect () {\n                const provider = await this.getProvider();\n                if (!provider) throw new _errors_connector_js__WEBPACK_IMPORTED_MODULE_1__.ProviderNotFoundError();\n                // Manage EIP-1193 event listeners\n                if (chainChanged) {\n                    provider.removeListener(\"chainChanged\", chainChanged);\n                    chainChanged = undefined;\n                }\n                if (disconnect) {\n                    provider.removeListener(\"disconnect\", disconnect);\n                    disconnect = undefined;\n                }\n                if (!connect) {\n                    connect = this.onConnect.bind(this);\n                    provider.on(\"connect\", connect);\n                }\n                // Experimental support for MetaMask disconnect\n                // https://github.com/MetaMask/metamask-improvement-proposals/blob/main/MIPs/mip-2.md\n                try {\n                    // Adding timeout as not all wallets support this method and can hang\n                    // https://github.com/wevm/wagmi/issues/4064\n                    await (0,viem__WEBPACK_IMPORTED_MODULE_4__.withTimeout)(()=>// TODO: Remove explicit type for viem@3\n                        provider.request({\n                            // `'wallet_revokePermissions'` added in `viem@2.10.3`\n                            method: \"wallet_revokePermissions\",\n                            params: [\n                                {\n                                    eth_accounts: {}\n                                }\n                            ]\n                        }), {\n                        timeout: 100\n                    });\n                } catch  {}\n                // Add shim signalling connector is disconnected\n                if (shimDisconnect) {\n                    await config.storage?.setItem(`${this.id}.disconnected`, true);\n                }\n                if (!parameters.target) await config.storage?.removeItem(\"injected.connected\");\n            },\n            async getAccounts () {\n                const provider = await this.getProvider();\n                if (!provider) throw new _errors_connector_js__WEBPACK_IMPORTED_MODULE_1__.ProviderNotFoundError();\n                const accounts = await provider.request({\n                    method: \"eth_accounts\"\n                });\n                return accounts.map((x)=>(0,viem__WEBPACK_IMPORTED_MODULE_2__.getAddress)(x));\n            },\n            async getChainId () {\n                const provider = await this.getProvider();\n                if (!provider) throw new _errors_connector_js__WEBPACK_IMPORTED_MODULE_1__.ProviderNotFoundError();\n                const hexChainId = await provider.request({\n                    method: \"eth_chainId\"\n                });\n                return Number(hexChainId);\n            },\n            async getProvider () {\n                if (true) return undefined;\n                let provider;\n                const target = getTarget();\n                if (typeof target.provider === \"function\") provider = target.provider(window);\n                else if (typeof target.provider === \"string\") provider = findProvider(window, target.provider);\n                else provider = target.provider;\n                // Some wallets do not conform to EIP-1193 (e.g. Trust Wallet)\n                // https://github.com/wevm/wagmi/issues/3526#issuecomment-1912683002\n                if (provider && !provider.removeListener) {\n                    // Try using `off` handler if it exists, otherwise noop\n                    if (\"off\" in provider && typeof provider.off === \"function\") provider.removeListener = provider.off;\n                    else provider.removeListener = ()=>{};\n                }\n                return provider;\n            },\n            async isAuthorized () {\n                try {\n                    const isDisconnected = shimDisconnect && // If shim exists in storage, connector is disconnected\n                    await config.storage?.getItem(`${this.id}.disconnected`);\n                    if (isDisconnected) return false;\n                    // Don't allow injected connector to connect if no target is set and it hasn't already connected\n                    // (e.g. flag in storage is not set). This prevents a targetless injected connector from connecting\n                    // automatically whenever there is a targeted connector configured.\n                    if (!parameters.target) {\n                        const connected = await config.storage?.getItem(\"injected.connected\");\n                        if (!connected) return false;\n                    }\n                    const provider = await this.getProvider();\n                    if (!provider) {\n                        if (unstable_shimAsyncInject !== undefined && unstable_shimAsyncInject !== false) {\n                            // If no provider is found, check for async injection\n                            // https://github.com/wevm/references/issues/167\n                            // https://github.com/MetaMask/detect-provider\n                            const handleEthereum = async ()=>{\n                                if (false) {}\n                                const provider = await this.getProvider();\n                                return !!provider;\n                            };\n                            const timeout = typeof unstable_shimAsyncInject === \"number\" ? unstable_shimAsyncInject : 1000;\n                            const res = await Promise.race([\n                                ... false ? 0 : [],\n                                new Promise((resolve)=>setTimeout(()=>resolve(handleEthereum()), timeout))\n                            ]);\n                            if (res) return true;\n                        }\n                        throw new _errors_connector_js__WEBPACK_IMPORTED_MODULE_1__.ProviderNotFoundError();\n                    }\n                    // Use retry strategy as some injected wallets (e.g. MetaMask) fail to\n                    // immediately resolve JSON-RPC requests on page load.\n                    const accounts = await (0,viem__WEBPACK_IMPORTED_MODULE_5__.withRetry)(()=>this.getAccounts());\n                    return !!accounts.length;\n                } catch  {\n                    return false;\n                }\n            },\n            async switchChain ({ addEthereumChainParameter, chainId }) {\n                const provider = await this.getProvider();\n                if (!provider) throw new _errors_connector_js__WEBPACK_IMPORTED_MODULE_1__.ProviderNotFoundError();\n                const chain = config.chains.find((x)=>x.id === chainId);\n                if (!chain) throw new viem__WEBPACK_IMPORTED_MODULE_3__.SwitchChainError(new _errors_config_js__WEBPACK_IMPORTED_MODULE_6__.ChainNotConfiguredError());\n                const promise = new Promise((resolve)=>{\n                    const listener = (data)=>{\n                        if (\"chainId\" in data && data.chainId === chainId) {\n                            config.emitter.off(\"change\", listener);\n                            resolve();\n                        }\n                    };\n                    config.emitter.on(\"change\", listener);\n                });\n                try {\n                    await Promise.all([\n                        provider.request({\n                            method: \"wallet_switchEthereumChain\",\n                            params: [\n                                {\n                                    chainId: (0,viem__WEBPACK_IMPORTED_MODULE_7__.numberToHex)(chainId)\n                                }\n                            ]\n                        })// During `'wallet_switchEthereumChain'`, MetaMask makes a `'net_version'` RPC call to the target chain.\n                        // If this request fails, MetaMask does not emit the `'chainChanged'` event, but will still switch the chain.\n                        // To counter this behavior, we request and emit the current chain ID to confirm the chain switch either via\n                        // this callback or an externally emitted `'chainChanged'` event.\n                        // https://github.com/MetaMask/metamask-extension/issues/24247\n                        .then(async ()=>{\n                            const currentChainId = await this.getChainId();\n                            if (currentChainId === chainId) config.emitter.emit(\"change\", {\n                                chainId\n                            });\n                        }),\n                        promise\n                    ]);\n                    return chain;\n                } catch (err) {\n                    const error = err;\n                    // Indicates chain is not added to provider\n                    if (error.code === 4902 || // Unwrapping for MetaMask Mobile\n                    // https://github.com/MetaMask/metamask-mobile/issues/2944#issuecomment-976988719\n                    error?.data?.originalError?.code === 4902) {\n                        try {\n                            const { default: blockExplorer, ...blockExplorers } = chain.blockExplorers ?? {};\n                            let blockExplorerUrls;\n                            if (addEthereumChainParameter?.blockExplorerUrls) blockExplorerUrls = addEthereumChainParameter.blockExplorerUrls;\n                            else if (blockExplorer) blockExplorerUrls = [\n                                blockExplorer.url,\n                                ...Object.values(blockExplorers).map((x)=>x.url)\n                            ];\n                            let rpcUrls;\n                            if (addEthereumChainParameter?.rpcUrls?.length) rpcUrls = addEthereumChainParameter.rpcUrls;\n                            else rpcUrls = [\n                                chain.rpcUrls.default?.http[0] ?? \"\"\n                            ];\n                            const addEthereumChain = {\n                                blockExplorerUrls,\n                                chainId: (0,viem__WEBPACK_IMPORTED_MODULE_7__.numberToHex)(chainId),\n                                chainName: addEthereumChainParameter?.chainName ?? chain.name,\n                                iconUrls: addEthereumChainParameter?.iconUrls,\n                                nativeCurrency: addEthereumChainParameter?.nativeCurrency ?? chain.nativeCurrency,\n                                rpcUrls\n                            };\n                            await Promise.all([\n                                provider.request({\n                                    method: \"wallet_addEthereumChain\",\n                                    params: [\n                                        addEthereumChain\n                                    ]\n                                }).then(async ()=>{\n                                    const currentChainId = await this.getChainId();\n                                    if (currentChainId === chainId) config.emitter.emit(\"change\", {\n                                        chainId\n                                    });\n                                    else throw new viem__WEBPACK_IMPORTED_MODULE_3__.UserRejectedRequestError(new Error(\"User rejected switch after adding network.\"));\n                                }),\n                                promise\n                            ]);\n                            return chain;\n                        } catch (error) {\n                            throw new viem__WEBPACK_IMPORTED_MODULE_3__.UserRejectedRequestError(error);\n                        }\n                    }\n                    if (error.code === viem__WEBPACK_IMPORTED_MODULE_3__.UserRejectedRequestError.code) throw new viem__WEBPACK_IMPORTED_MODULE_3__.UserRejectedRequestError(error);\n                    throw new viem__WEBPACK_IMPORTED_MODULE_3__.SwitchChainError(error);\n                }\n            },\n            async onAccountsChanged (accounts) {\n                // Disconnect if there are no accounts\n                if (accounts.length === 0) this.onDisconnect();\n                else if (config.emitter.listenerCount(\"connect\")) {\n                    const chainId = (await this.getChainId()).toString();\n                    this.onConnect({\n                        chainId\n                    });\n                    // Remove disconnected shim if it exists\n                    if (shimDisconnect) await config.storage?.removeItem(`${this.id}.disconnected`);\n                } else config.emitter.emit(\"change\", {\n                    accounts: accounts.map((x)=>(0,viem__WEBPACK_IMPORTED_MODULE_2__.getAddress)(x))\n                });\n            },\n            onChainChanged (chain) {\n                const chainId = Number(chain);\n                config.emitter.emit(\"change\", {\n                    chainId\n                });\n            },\n            async onConnect (connectInfo) {\n                const accounts = await this.getAccounts();\n                if (accounts.length === 0) return;\n                const chainId = Number(connectInfo.chainId);\n                config.emitter.emit(\"connect\", {\n                    accounts,\n                    chainId\n                });\n                // Manage EIP-1193 event listeners\n                const provider = await this.getProvider();\n                if (provider) {\n                    if (connect) {\n                        provider.removeListener(\"connect\", connect);\n                        connect = undefined;\n                    }\n                    if (!accountsChanged) {\n                        accountsChanged = this.onAccountsChanged.bind(this);\n                        provider.on(\"accountsChanged\", accountsChanged);\n                    }\n                    if (!chainChanged) {\n                        chainChanged = this.onChainChanged.bind(this);\n                        provider.on(\"chainChanged\", chainChanged);\n                    }\n                    if (!disconnect) {\n                        disconnect = this.onDisconnect.bind(this);\n                        provider.on(\"disconnect\", disconnect);\n                    }\n                }\n            },\n            async onDisconnect (error) {\n                const provider = await this.getProvider();\n                // If MetaMask emits a `code: 1013` error, wait for reconnection before disconnecting\n                // https://github.com/MetaMask/providers/pull/120\n                if (error && error.code === 1013) {\n                    if (provider && !!(await this.getAccounts()).length) return;\n                }\n                // No need to remove `${this.id}.disconnected` from storage because `onDisconnect` is typically\n                // only called when the wallet is disconnected through the wallet's interface, meaning the wallet\n                // actually disconnected and we don't need to simulate it.\n                config.emitter.emit(\"disconnect\");\n                // Manage EIP-1193 event listeners\n                if (provider) {\n                    if (chainChanged) {\n                        provider.removeListener(\"chainChanged\", chainChanged);\n                        chainChanged = undefined;\n                    }\n                    if (disconnect) {\n                        provider.removeListener(\"disconnect\", disconnect);\n                        disconnect = undefined;\n                    }\n                    if (!connect) {\n                        connect = this.onConnect.bind(this);\n                        provider.on(\"connect\", connect);\n                    }\n                }\n            }\n        }));\n}\nconst targetMap = {\n    coinbaseWallet: {\n        id: \"coinbaseWallet\",\n        name: \"Coinbase Wallet\",\n        provider (window1) {\n            if (window1?.coinbaseWalletExtension) return window1.coinbaseWalletExtension;\n            return findProvider(window1, \"isCoinbaseWallet\");\n        }\n    },\n    metaMask: {\n        id: \"metaMask\",\n        name: \"MetaMask\",\n        provider (window1) {\n            return findProvider(window1, (provider)=>{\n                if (!provider.isMetaMask) return false;\n                // Brave tries to make itself look like MetaMask\n                // Could also try RPC `web3_clientVersion` if following is unreliable\n                if (provider.isBraveWallet && !provider._events && !provider._state) return false;\n                // Other wallets that try to look like MetaMask\n                const flags = [\n                    \"isApexWallet\",\n                    \"isAvalanche\",\n                    \"isBitKeep\",\n                    \"isBlockWallet\",\n                    \"isKuCoinWallet\",\n                    \"isMathWallet\",\n                    \"isOkxWallet\",\n                    \"isOKExWallet\",\n                    \"isOneInchIOSWallet\",\n                    \"isOneInchAndroidWallet\",\n                    \"isOpera\",\n                    \"isPhantom\",\n                    \"isPortal\",\n                    \"isRabby\",\n                    \"isTokenPocket\",\n                    \"isTokenary\",\n                    \"isUniswapWallet\",\n                    \"isZerion\"\n                ];\n                for (const flag of flags)if (provider[flag]) return false;\n                return true;\n            });\n        }\n    },\n    phantom: {\n        id: \"phantom\",\n        name: \"Phantom\",\n        provider (window1) {\n            if (window1?.phantom?.ethereum) return window1.phantom?.ethereum;\n            return findProvider(window1, \"isPhantom\");\n        }\n    }\n};\nfunction findProvider(window1, select) {\n    function isProvider(provider) {\n        if (typeof select === \"function\") return select(provider);\n        if (typeof select === \"string\") return provider[select];\n        return true;\n    }\n    const ethereum = window1.ethereum;\n    if (ethereum?.providers) return ethereum.providers.find((provider)=>isProvider(provider));\n    if (ethereum && isProvider(ethereum)) return ethereum;\n    return undefined;\n} //# sourceMappingURL=injected.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdhZ21pK2NvcmVAMi4xOS4wX0B0YW5zdGFjaytxdWVyeS1jb3JlQDUuODUuM19AdHlwZXMrcmVhY3RAMTguMi4zN19yZWFjdEAxOC4yLjBfdHlwZXNjXzQwYzZiOTdhZjE5M2UzNGRiM2Q0YzAxOTMzMTQ0MzgzL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29yZS9kaXN0L2VzbS9jb25uZWN0b3JzL2luamVjdGVkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFpSjtBQUNuRjtBQUNDO0FBQ1I7QUFDdkRVLFNBQVNDLElBQUksR0FBRztBQUNULFNBQVNELFNBQVNFLGFBQWEsQ0FBQyxDQUFDO0lBQ3BDLE1BQU0sRUFBRUMsaUJBQWlCLElBQUksRUFBRUMsd0JBQXdCLEVBQUUsR0FBR0Y7SUFDNUQsU0FBU0c7UUFDTCxNQUFNQyxTQUFTSixXQUFXSSxNQUFNO1FBQ2hDLElBQUksT0FBT0EsV0FBVyxZQUFZO1lBQzlCLE1BQU1DLFNBQVNEO1lBQ2YsSUFBSUMsUUFDQSxPQUFPQTtRQUNmO1FBQ0EsSUFBSSxPQUFPRCxXQUFXLFVBQ2xCLE9BQU9BO1FBQ1gsSUFBSSxPQUFPQSxXQUFXLFVBQ2xCLE9BQU87WUFDSCxHQUFJRSxTQUFTLENBQUNGLE9BQU8sSUFBSTtnQkFDckJHLElBQUlIO2dCQUNKSSxNQUFNLENBQUMsRUFBRUosTUFBTSxDQUFDLEVBQUUsQ0FBQ0ssV0FBVyxHQUFHLEVBQUVMLE9BQU9NLEtBQUssQ0FBQyxHQUFHLENBQUM7Z0JBQ3BEQyxVQUFVLENBQUMsRUFBRSxFQUFFUCxNQUFNLENBQUMsRUFBRSxDQUFDSyxXQUFXLEdBQUcsRUFBRUwsT0FBT00sS0FBSyxDQUFDLEdBQUcsQ0FBQztZQUM5RCxDQUFDO1FBQ0w7UUFDSixPQUFPO1lBQ0hILElBQUk7WUFDSkMsTUFBTTtZQUNORyxVQUFTQyxPQUFNO2dCQUNYLE9BQU9BLFNBQVFDO1lBQ25CO1FBQ0o7SUFDSjtJQUNBLElBQUlDO0lBQ0osSUFB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LENBQUNsRyxTQUFTbUcsTUFBTSxFQUMvRCxPQUFPO2dCQUNYLCtDQUErQztnQkFDL0MsTUFBTUMsUUFBUTtvQkFDVjtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtpQkFDSDtnQkFDRCxLQUFLLE1BQU1DLFFBQVFELE1BQ2YsSUFBSXBHLFFBQVEsQ0FBQ3FHLEtBQUssRUFDZCxPQUFPO2dCQUNmLE9BQU87WUFDWDtRQUNKO0lBQ0o7SUFDQUMsU0FBUztRQUNMMUcsSUFBSTtRQUNKQyxNQUFNO1FBQ05HLFVBQVNDLE9BQU07WUFDWCxJQUFJQSxTQUFRcUcsU0FBU3BHLFVBQ2pCLE9BQU9ELFFBQU9xRyxPQUFPLEVBQUVwRztZQUMzQixPQUFPZ0QsYUFBYWpELFNBQVE7UUFDaEM7SUFDSjtBQUNKO0FBQ0EsU0FBU2lELGFBQWFqRCxPQUFNLEVBQUVzRyxNQUFNO0lBQ2hDLFNBQVNDLFdBQVd4RyxRQUFRO1FBQ3hCLElBQUksT0FBT3VHLFdBQVcsWUFDbEIsT0FBT0EsT0FBT3ZHO1FBQ2xCLElBQUksT0FBT3VHLFdBQVcsVUFDbEIsT0FBT3ZHLFFBQVEsQ0FBQ3VHLE9BQU87UUFDM0IsT0FBTztJQUNYO0lBQ0EsTUFBTXJHLFdBQVdELFFBQU9DLFFBQVE7SUFDaEMsSUFBSUEsVUFBVXVHLFdBQ1YsT0FBT3ZHLFNBQVN1RyxTQUFTLENBQUN0QyxJQUFJLENBQUMsQ0FBQ25FLFdBQWF3RyxXQUFXeEc7SUFDNUQsSUFBSUUsWUFBWXNHLFdBQVd0RyxXQUN2QixPQUFPQTtJQUNYLE9BQU9tQztBQUNYLEVBQ0Esb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3BhY2UtanVtcC1nYW1lLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B3YWdtaStjb3JlQDIuMTkuMF9AdGFuc3RhY2srcXVlcnktY29yZUA1Ljg1LjNfQHR5cGVzK3JlYWN0QDE4LjIuMzdfcmVhY3RAMTguMi4wX3R5cGVzY180MGM2Yjk3YWYxOTNlMzRkYjNkNGMwMTkzMzE0NDM4My9ub2RlX21vZHVsZXMvQHdhZ21pL2NvcmUvZGlzdC9lc20vY29ubmVjdG9ycy9pbmplY3RlZC5qcz9mY2E4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEFkZHJlc3MsIG51bWJlclRvSGV4LCBSZXNvdXJjZVVuYXZhaWxhYmxlUnBjRXJyb3IsIFN3aXRjaENoYWluRXJyb3IsIFVzZXJSZWplY3RlZFJlcXVlc3RFcnJvciwgd2l0aFJldHJ5LCB3aXRoVGltZW91dCwgfSBmcm9tICd2aWVtJztcbmltcG9ydCB7IENoYWluTm90Q29uZmlndXJlZEVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2NvbmZpZy5qcyc7XG5pbXBvcnQgeyBQcm92aWRlck5vdEZvdW5kRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvY29ubmVjdG9yLmpzJztcbmltcG9ydCB7IGNyZWF0ZUNvbm5lY3RvciB9IGZyb20gJy4vY3JlYXRlQ29ubmVjdG9yLmpzJztcbmluamVjdGVkLnR5cGUgPSAnaW5qZWN0ZWQnO1xuZXhwb3J0IGZ1bmN0aW9uIGluamVjdGVkKHBhcmFtZXRlcnMgPSB7fSkge1xuICAgIGNvbnN0IHsgc2hpbURpc2Nvbm5lY3QgPSB0cnVlLCB1bnN0YWJsZV9zaGltQXN5bmNJbmplY3QgfSA9IHBhcmFtZXRlcnM7XG4gICAgZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBwYXJhbWV0ZXJzLnRhcmdldDtcbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRhcmdldCgpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdClcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnb2JqZWN0JylcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uKHRhcmdldE1hcFt0YXJnZXRdID8/IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogYCR7dGFyZ2V0WzBdLnRvVXBwZXJDYXNlKCl9JHt0YXJnZXQuc2xpY2UoMSl9YCxcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXI6IGBpcyR7dGFyZ2V0WzBdLnRvVXBwZXJDYXNlKCl9JHt0YXJnZXQuc2xpY2UoMSl9YCxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogJ2luamVjdGVkJyxcbiAgICAgICAgICAgIG5hbWU6ICdJbmplY3RlZCcsXG4gICAgICAgICAgICBwcm92aWRlcih3aW5kb3cpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93Py5ldGhlcmV1bTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGxldCBhY2NvdW50c0NoYW5nZWQ7XG4gICAgbGV0IGNoYWluQ2hhbmdlZDtcbiAgICBsZXQgY29ubmVjdDtcbiAgICBsZXQgZGlzY29ubmVjdDtcbiAgICByZXR1cm4gY3JlYXRlQ29ubmVjdG9yKChjb25maWcpID0+ICh7XG4gICAgICAgIGdldCBpY29uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldFRhcmdldCgpLmljb247XG4gICAgICAgIH0sXG4gICAgICAgIGdldCBpZCgpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRUYXJnZXQoKS5pZDtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0VGFyZ2V0KCkubmFtZTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqIEBkZXByZWNhdGVkICovXG4gICAgICAgIGdldCBzdXBwb3J0c1NpbXVsYXRpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgdHlwZTogaW5qZWN0ZWQudHlwZSxcbiAgICAgICAgYXN5bmMgc2V0dXAoKSB7XG4gICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IGF3YWl0IHRoaXMuZ2V0UHJvdmlkZXIoKTtcbiAgICAgICAgICAgIC8vIE9ubHkgc3RhcnQgbGlzdGVuaW5nIGZvciBldmVudHMgaWYgYHRhcmdldGAgaXMgc2V0LCBvdGhlcndpc2UgYGluamVjdGVkKClgIHdpbGwgYWxzbyByZWNlaXZlIGV2ZW50c1xuICAgICAgICAgICAgaWYgKHByb3ZpZGVyPy5vbiAmJiBwYXJhbWV0ZXJzLnRhcmdldCkge1xuICAgICAgICAgICAgICAgIGlmICghY29ubmVjdCkge1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0ID0gdGhpcy5vbkNvbm5lY3QuYmluZCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXIub24oJ2Nvbm5lY3QnLCBjb25uZWN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gV2Ugc2hvdWxkbid0IG5lZWQgdG8gbGlzdGVuIGZvciBgJ2FjY291bnRzQ2hhbmdlZCdgIGhlcmUgc2luY2UgdGhlIGAnY29ubmVjdCdgIGV2ZW50IHNob3VsZCBzdWZmaWNlIChhbmQgd2FsbGV0IHNob3VsZG4ndCBiZSBjb25uZWN0ZWQgeWV0KS5cbiAgICAgICAgICAgICAgICAvLyBTb21lIHdhbGxldHMsIGxpa2UgTWV0YU1hc2ssIGRvIG5vdCBpbXBsZW1lbnQgdGhlIGAnY29ubmVjdCdgIGV2ZW50IGFuZCBvdmVybG9hZCBgJ2FjY291bnRzQ2hhbmdlZCdgIGluc3RlYWQuXG4gICAgICAgICAgICAgICAgaWYgKCFhY2NvdW50c0NoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudHNDaGFuZ2VkID0gdGhpcy5vbkFjY291bnRzQ2hhbmdlZC5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlci5vbignYWNjb3VudHNDaGFuZ2VkJywgYWNjb3VudHNDaGFuZ2VkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIGNvbm5lY3QoeyBjaGFpbklkLCBpc1JlY29ubmVjdGluZyB9ID0ge30pIHtcbiAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVyID0gYXdhaXQgdGhpcy5nZXRQcm92aWRlcigpO1xuICAgICAgICAgICAgaWYgKCFwcm92aWRlcilcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUHJvdmlkZXJOb3RGb3VuZEVycm9yKCk7XG4gICAgICAgICAgICBsZXQgYWNjb3VudHMgPSBbXTtcbiAgICAgICAgICAgIGlmIChpc1JlY29ubmVjdGluZylcbiAgICAgICAgICAgICAgICBhY2NvdW50cyA9IGF3YWl0IHRoaXMuZ2V0QWNjb3VudHMoKS5jYXRjaCgoKSA9PiBbXSk7XG4gICAgICAgICAgICBlbHNlIGlmIChzaGltRGlzY29ubmVjdCkge1xuICAgICAgICAgICAgICAgIC8vIEF0dGVtcHQgdG8gc2hvdyBhbm90aGVyIHByb21wdCBmb3Igc2VsZWN0aW5nIGFjY291bnQgaWYgYHNoaW1EaXNjb25uZWN0YCBmbGFnIGlzIGVuYWJsZWRcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwZXJtaXNzaW9ucyA9IGF3YWl0IHByb3ZpZGVyLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnd2FsbGV0X3JlcXVlc3RQZXJtaXNzaW9ucycsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IFt7IGV0aF9hY2NvdW50czoge30gfV0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBhY2NvdW50cyA9IHBlcm1pc3Npb25zWzBdPy5jYXZlYXRzPy5bMF0/LnZhbHVlPy5tYXAoKHgpID0+IGdldEFkZHJlc3MoeCkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBgJ3dhbGxldF9yZXF1ZXN0UGVybWlzc2lvbnMnYCBjYW4gcmV0dXJuIGEgZGlmZmVyZW50IG9yZGVyIG9mIGFjY291bnRzIHRoYW4gYCdldGhfYWNjb3VudHMnYFxuICAgICAgICAgICAgICAgICAgICAvLyBzd2l0Y2ggdG8gYCdldGhfYWNjb3VudHMnYCBvcmRlcmluZyBpZiBtb3JlIHRoYW4gb25lIGFjY291bnQgaXMgY29ubmVjdGVkXG4gICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZXZtL3dhZ21pL2lzc3Vlcy80MTQwXG4gICAgICAgICAgICAgICAgICAgIGlmIChhY2NvdW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzb3J0ZWRBY2NvdW50cyA9IGF3YWl0IHRoaXMuZ2V0QWNjb3VudHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnRzID0gc29ydGVkQWNjb3VudHM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgLy8gTm90IGFsbCBpbmplY3RlZCBwcm92aWRlcnMgc3VwcG9ydCBgd2FsbGV0X3JlcXVlc3RQZXJtaXNzaW9uc2AgKGUuZy4gTWV0YU1hc2sgaU9TKS5cbiAgICAgICAgICAgICAgICAgICAgLy8gT25seSBidWJibGUgdXAgZXJyb3IgaWYgdXNlciByZWplY3RzIHJlcXVlc3RcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09IFVzZXJSZWplY3RlZFJlcXVlc3RFcnJvci5jb2RlKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVzZXJSZWplY3RlZFJlcXVlc3RFcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIC8vIE9yIHByb21wdCBpcyBhbHJlYWR5IG9wZW5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09IFJlc291cmNlVW5hdmFpbGFibGVScGNFcnJvci5jb2RlKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIWFjY291bnRzPy5sZW5ndGggJiYgIWlzUmVjb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RlZEFjY291bnRzID0gYXdhaXQgcHJvdmlkZXIucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdldGhfcmVxdWVzdEFjY291bnRzJyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRzID0gcmVxdWVzdGVkQWNjb3VudHMubWFwKCh4KSA9PiBnZXRBZGRyZXNzKHgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gTWFuYWdlIEVJUC0xMTkzIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZWlwcy5ldGhlcmV1bS5vcmcvRUlQUy9laXAtMTE5MyNldmVudHNcbiAgICAgICAgICAgICAgICBpZiAoY29ubmVjdCkge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlci5yZW1vdmVMaXN0ZW5lcignY29ubmVjdCcsIGNvbm5lY3QpO1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWFjY291bnRzQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgICAgICBhY2NvdW50c0NoYW5nZWQgPSB0aGlzLm9uQWNjb3VudHNDaGFuZ2VkLmJpbmQodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyLm9uKCdhY2NvdW50c0NoYW5nZWQnLCBhY2NvdW50c0NoYW5nZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWNoYWluQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgICAgICBjaGFpbkNoYW5nZWQgPSB0aGlzLm9uQ2hhaW5DaGFuZ2VkLmJpbmQodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyLm9uKCdjaGFpbkNoYW5nZWQnLCBjaGFpbkNoYW5nZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWRpc2Nvbm5lY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzY29ubmVjdCA9IHRoaXMub25EaXNjb25uZWN0LmJpbmQodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyLm9uKCdkaXNjb25uZWN0JywgZGlzY29ubmVjdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFN3aXRjaCB0byBjaGFpbiBpZiBwcm92aWRlZFxuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50Q2hhaW5JZCA9IGF3YWl0IHRoaXMuZ2V0Q2hhaW5JZCgpO1xuICAgICAgICAgICAgICAgIGlmIChjaGFpbklkICYmIGN1cnJlbnRDaGFpbklkICE9PSBjaGFpbklkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYWluID0gYXdhaXQgdGhpcy5zd2l0Y2hDaGFpbih7IGNoYWluSWQgfSkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gVXNlclJlamVjdGVkUmVxdWVzdEVycm9yLmNvZGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBpZDogY3VycmVudENoYWluSWQgfTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDaGFpbklkID0gY2hhaW4/LmlkID8/IGN1cnJlbnRDaGFpbklkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgZGlzY29ubmVjdGVkIHNoaW0gaWYgaXQgZXhpc3RzXG4gICAgICAgICAgICAgICAgaWYgKHNoaW1EaXNjb25uZWN0KVxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBjb25maWcuc3RvcmFnZT8ucmVtb3ZlSXRlbShgJHt0aGlzLmlkfS5kaXNjb25uZWN0ZWRgKTtcbiAgICAgICAgICAgICAgICAvLyBBZGQgY29ubmVjdGVkIHNoaW0gaWYgbm8gdGFyZ2V0IGV4aXN0c1xuICAgICAgICAgICAgICAgIGlmICghcGFyYW1ldGVycy50YXJnZXQpXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGNvbmZpZy5zdG9yYWdlPy5zZXRJdGVtKCdpbmplY3RlZC5jb25uZWN0ZWQnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBhY2NvdW50cywgY2hhaW5JZDogY3VycmVudENoYWluSWQgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gVXNlclJlamVjdGVkUmVxdWVzdEVycm9yLmNvZGUpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBVc2VyUmVqZWN0ZWRSZXF1ZXN0RXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvci5jb2RlID09PSBSZXNvdXJjZVVuYXZhaWxhYmxlUnBjRXJyb3IuY29kZSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlc291cmNlVW5hdmFpbGFibGVScGNFcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIGRpc2Nvbm5lY3QoKSB7XG4gICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IGF3YWl0IHRoaXMuZ2V0UHJvdmlkZXIoKTtcbiAgICAgICAgICAgIGlmICghcHJvdmlkZXIpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFByb3ZpZGVyTm90Rm91bmRFcnJvcigpO1xuICAgICAgICAgICAgLy8gTWFuYWdlIEVJUC0xMTkzIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICAgICAgaWYgKGNoYWluQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyLnJlbW92ZUxpc3RlbmVyKCdjaGFpbkNoYW5nZWQnLCBjaGFpbkNoYW5nZWQpO1xuICAgICAgICAgICAgICAgIGNoYWluQ2hhbmdlZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkaXNjb25uZWN0KSB7XG4gICAgICAgICAgICAgICAgcHJvdmlkZXIucmVtb3ZlTGlzdGVuZXIoJ2Rpc2Nvbm5lY3QnLCBkaXNjb25uZWN0KTtcbiAgICAgICAgICAgICAgICBkaXNjb25uZWN0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjb25uZWN0KSB7XG4gICAgICAgICAgICAgICAgY29ubmVjdCA9IHRoaXMub25Db25uZWN0LmJpbmQodGhpcyk7XG4gICAgICAgICAgICAgICAgcHJvdmlkZXIub24oJ2Nvbm5lY3QnLCBjb25uZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEV4cGVyaW1lbnRhbCBzdXBwb3J0IGZvciBNZXRhTWFzayBkaXNjb25uZWN0XG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTWV0YU1hc2svbWV0YW1hc2staW1wcm92ZW1lbnQtcHJvcG9zYWxzL2Jsb2IvbWFpbi9NSVBzL21pcC0yLm1kXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIEFkZGluZyB0aW1lb3V0IGFzIG5vdCBhbGwgd2FsbGV0cyBzdXBwb3J0IHRoaXMgbWV0aG9kIGFuZCBjYW4gaGFuZ1xuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZXZtL3dhZ21pL2lzc3Vlcy80MDY0XG4gICAgICAgICAgICAgICAgYXdhaXQgd2l0aFRpbWVvdXQoKCkgPT4gXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogUmVtb3ZlIGV4cGxpY2l0IHR5cGUgZm9yIHZpZW1AM1xuICAgICAgICAgICAgICAgIHByb3ZpZGVyLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICAvLyBgJ3dhbGxldF9yZXZva2VQZXJtaXNzaW9ucydgIGFkZGVkIGluIGB2aWVtQDIuMTAuM2BcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnd2FsbGV0X3Jldm9rZVBlcm1pc3Npb25zJyxcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBbeyBldGhfYWNjb3VudHM6IHt9IH1dLFxuICAgICAgICAgICAgICAgIH0pLCB7IHRpbWVvdXQ6IDEwMCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIHsgfVxuICAgICAgICAgICAgLy8gQWRkIHNoaW0gc2lnbmFsbGluZyBjb25uZWN0b3IgaXMgZGlzY29ubmVjdGVkXG4gICAgICAgICAgICBpZiAoc2hpbURpc2Nvbm5lY3QpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBjb25maWcuc3RvcmFnZT8uc2V0SXRlbShgJHt0aGlzLmlkfS5kaXNjb25uZWN0ZWRgLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghcGFyYW1ldGVycy50YXJnZXQpXG4gICAgICAgICAgICAgICAgYXdhaXQgY29uZmlnLnN0b3JhZ2U/LnJlbW92ZUl0ZW0oJ2luamVjdGVkLmNvbm5lY3RlZCcpO1xuICAgICAgICB9LFxuICAgICAgICBhc3luYyBnZXRBY2NvdW50cygpIHtcbiAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVyID0gYXdhaXQgdGhpcy5nZXRQcm92aWRlcigpO1xuICAgICAgICAgICAgaWYgKCFwcm92aWRlcilcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUHJvdmlkZXJOb3RGb3VuZEVycm9yKCk7XG4gICAgICAgICAgICBjb25zdCBhY2NvdW50cyA9IGF3YWl0IHByb3ZpZGVyLnJlcXVlc3QoeyBtZXRob2Q6ICdldGhfYWNjb3VudHMnIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGFjY291bnRzLm1hcCgoeCkgPT4gZ2V0QWRkcmVzcyh4KSk7XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIGdldENoYWluSWQoKSB7XG4gICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IGF3YWl0IHRoaXMuZ2V0UHJvdmlkZXIoKTtcbiAgICAgICAgICAgIGlmICghcHJvdmlkZXIpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFByb3ZpZGVyTm90Rm91bmRFcnJvcigpO1xuICAgICAgICAgICAgY29uc3QgaGV4Q2hhaW5JZCA9IGF3YWl0IHByb3ZpZGVyLnJlcXVlc3QoeyBtZXRob2Q6ICdldGhfY2hhaW5JZCcgfSk7XG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyKGhleENoYWluSWQpO1xuICAgICAgICB9LFxuICAgICAgICBhc3luYyBnZXRQcm92aWRlcigpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgbGV0IHByb3ZpZGVyO1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZ2V0VGFyZ2V0KCk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldC5wcm92aWRlciA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgICAgICBwcm92aWRlciA9IHRhcmdldC5wcm92aWRlcih3aW5kb3cpO1xuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHRhcmdldC5wcm92aWRlciA9PT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgcHJvdmlkZXIgPSBmaW5kUHJvdmlkZXIod2luZG93LCB0YXJnZXQucHJvdmlkZXIpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHByb3ZpZGVyID0gdGFyZ2V0LnByb3ZpZGVyO1xuICAgICAgICAgICAgLy8gU29tZSB3YWxsZXRzIGRvIG5vdCBjb25mb3JtIHRvIEVJUC0xMTkzIChlLmcuIFRydXN0IFdhbGxldClcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZXZtL3dhZ21pL2lzc3Vlcy8zNTI2I2lzc3VlY29tbWVudC0xOTEyNjgzMDAyXG4gICAgICAgICAgICBpZiAocHJvdmlkZXIgJiYgIXByb3ZpZGVyLnJlbW92ZUxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgLy8gVHJ5IHVzaW5nIGBvZmZgIGhhbmRsZXIgaWYgaXQgZXhpc3RzLCBvdGhlcndpc2Ugbm9vcFxuICAgICAgICAgICAgICAgIGlmICgnb2ZmJyBpbiBwcm92aWRlciAmJiB0eXBlb2YgcHJvdmlkZXIub2ZmID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgICAgICAgICBwcm92aWRlci5yZW1vdmVMaXN0ZW5lciA9XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlci5vZmY7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBwcm92aWRlci5yZW1vdmVMaXN0ZW5lciA9ICgpID0+IHsgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwcm92aWRlcjtcbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgaXNBdXRob3JpemVkKCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpc0Rpc2Nvbm5lY3RlZCA9IHNoaW1EaXNjb25uZWN0ICYmXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHNoaW0gZXhpc3RzIGluIHN0b3JhZ2UsIGNvbm5lY3RvciBpcyBkaXNjb25uZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgKGF3YWl0IGNvbmZpZy5zdG9yYWdlPy5nZXRJdGVtKGAke3RoaXMuaWR9LmRpc2Nvbm5lY3RlZGApKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNEaXNjb25uZWN0ZWQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAvLyBEb24ndCBhbGxvdyBpbmplY3RlZCBjb25uZWN0b3IgdG8gY29ubmVjdCBpZiBubyB0YXJnZXQgaXMgc2V0IGFuZCBpdCBoYXNuJ3QgYWxyZWFkeSBjb25uZWN0ZWRcbiAgICAgICAgICAgICAgICAvLyAoZS5nLiBmbGFnIGluIHN0b3JhZ2UgaXMgbm90IHNldCkuIFRoaXMgcHJldmVudHMgYSB0YXJnZXRsZXNzIGluamVjdGVkIGNvbm5lY3RvciBmcm9tIGNvbm5lY3RpbmdcbiAgICAgICAgICAgICAgICAvLyBhdXRvbWF0aWNhbGx5IHdoZW5ldmVyIHRoZXJlIGlzIGEgdGFyZ2V0ZWQgY29ubmVjdG9yIGNvbmZpZ3VyZWQuXG4gICAgICAgICAgICAgICAgaWYgKCFwYXJhbWV0ZXJzLnRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb25uZWN0ZWQgPSBhd2FpdCBjb25maWcuc3RvcmFnZT8uZ2V0SXRlbSgnaW5qZWN0ZWQuY29ubmVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY29ubmVjdGVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IGF3YWl0IHRoaXMuZ2V0UHJvdmlkZXIoKTtcbiAgICAgICAgICAgICAgICBpZiAoIXByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1bnN0YWJsZV9zaGltQXN5bmNJbmplY3QgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdW5zdGFibGVfc2hpbUFzeW5jSW5qZWN0ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgbm8gcHJvdmlkZXIgaXMgZm91bmQsIGNoZWNrIGZvciBhc3luYyBpbmplY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZXZtL3JlZmVyZW5jZXMvaXNzdWVzLzE2N1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL01ldGFNYXNrL2RldGVjdC1wcm92aWRlclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlRXRoZXJldW0gPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXRoZXJldW0jaW5pdGlhbGl6ZWQnLCBoYW5kbGVFdGhlcmV1bSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBhd2FpdCB0aGlzLmdldFByb3ZpZGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhcHJvdmlkZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGltZW91dCA9IHR5cGVvZiB1bnN0YWJsZV9zaGltQXN5bmNJbmplY3QgPT09ICdudW1iZXInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB1bnN0YWJsZV9zaGltQXN5bmNJbmplY3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IDFfMDAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgUHJvbWlzZS5yYWNlKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4odHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2V0aGVyZXVtI2luaXRpYWxpemVkJywgKCkgPT4gcmVzb2x2ZShoYW5kbGVFdGhlcmV1bSgpKSwgeyBvbmNlOiB0cnVlIH0pKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFtdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKGhhbmRsZUV0aGVyZXVtKCkpLCB0aW1lb3V0KSksXG4gICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFByb3ZpZGVyTm90Rm91bmRFcnJvcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBVc2UgcmV0cnkgc3RyYXRlZ3kgYXMgc29tZSBpbmplY3RlZCB3YWxsZXRzIChlLmcuIE1ldGFNYXNrKSBmYWlsIHRvXG4gICAgICAgICAgICAgICAgLy8gaW1tZWRpYXRlbHkgcmVzb2x2ZSBKU09OLVJQQyByZXF1ZXN0cyBvbiBwYWdlIGxvYWQuXG4gICAgICAgICAgICAgICAgY29uc3QgYWNjb3VudHMgPSBhd2FpdCB3aXRoUmV0cnkoKCkgPT4gdGhpcy5nZXRBY2NvdW50cygpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gISFhY2NvdW50cy5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhc3luYyBzd2l0Y2hDaGFpbih7IGFkZEV0aGVyZXVtQ2hhaW5QYXJhbWV0ZXIsIGNoYWluSWQgfSkge1xuICAgICAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBhd2FpdCB0aGlzLmdldFByb3ZpZGVyKCk7XG4gICAgICAgICAgICBpZiAoIXByb3ZpZGVyKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBQcm92aWRlck5vdEZvdW5kRXJyb3IoKTtcbiAgICAgICAgICAgIGNvbnN0IGNoYWluID0gY29uZmlnLmNoYWlucy5maW5kKCh4KSA9PiB4LmlkID09PSBjaGFpbklkKTtcbiAgICAgICAgICAgIGlmICghY2hhaW4pXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFN3aXRjaENoYWluRXJyb3IobmV3IENoYWluTm90Q29uZmlndXJlZEVycm9yKCkpO1xuICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGlzdGVuZXIgPSAoKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCdjaGFpbklkJyBpbiBkYXRhICYmIGRhdGEuY2hhaW5JZCA9PT0gY2hhaW5JZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLmVtaXR0ZXIub2ZmKCdjaGFuZ2UnLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb25maWcuZW1pdHRlci5vbignY2hhbmdlJywgbGlzdGVuZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ3dhbGxldF9zd2l0Y2hFdGhlcmV1bUNoYWluJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogW3sgY2hhaW5JZDogbnVtYmVyVG9IZXgoY2hhaW5JZCkgfV0sXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEdXJpbmcgYCd3YWxsZXRfc3dpdGNoRXRoZXJldW1DaGFpbidgLCBNZXRhTWFzayBtYWtlcyBhIGAnbmV0X3ZlcnNpb24nYCBSUEMgY2FsbCB0byB0aGUgdGFyZ2V0IGNoYWluLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhpcyByZXF1ZXN0IGZhaWxzLCBNZXRhTWFzayBkb2VzIG5vdCBlbWl0IHRoZSBgJ2NoYWluQ2hhbmdlZCdgIGV2ZW50LCBidXQgd2lsbCBzdGlsbCBzd2l0Y2ggdGhlIGNoYWluLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVG8gY291bnRlciB0aGlzIGJlaGF2aW9yLCB3ZSByZXF1ZXN0IGFuZCBlbWl0IHRoZSBjdXJyZW50IGNoYWluIElEIHRvIGNvbmZpcm0gdGhlIGNoYWluIHN3aXRjaCBlaXRoZXIgdmlhXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGNhbGxiYWNrIG9yIGFuIGV4dGVybmFsbHkgZW1pdHRlZCBgJ2NoYWluQ2hhbmdlZCdgIGV2ZW50LlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL01ldGFNYXNrL21ldGFtYXNrLWV4dGVuc2lvbi9pc3N1ZXMvMjQyNDdcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDaGFpbklkID0gYXdhaXQgdGhpcy5nZXRDaGFpbklkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudENoYWluSWQgPT09IGNoYWluSWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLmVtaXR0ZXIuZW1pdCgnY2hhbmdlJywgeyBjaGFpbklkIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZSxcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hhaW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBlcnI7XG4gICAgICAgICAgICAgICAgLy8gSW5kaWNhdGVzIGNoYWluIGlzIG5vdCBhZGRlZCB0byBwcm92aWRlclxuICAgICAgICAgICAgICAgIGlmIChlcnJvci5jb2RlID09PSA0OTAyIHx8XG4gICAgICAgICAgICAgICAgICAgIC8vIFVud3JhcHBpbmcgZm9yIE1ldGFNYXNrIE1vYmlsZVxuICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTWV0YU1hc2svbWV0YW1hc2stbW9iaWxlL2lzc3Vlcy8yOTQ0I2lzc3VlY29tbWVudC05NzY5ODg3MTlcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgICAgID8uZGF0YT8ub3JpZ2luYWxFcnJvcj8uY29kZSA9PT0gNDkwMikge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBkZWZhdWx0OiBibG9ja0V4cGxvcmVyLCAuLi5ibG9ja0V4cGxvcmVycyB9ID0gY2hhaW4uYmxvY2tFeHBsb3JlcnMgPz8ge307XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYmxvY2tFeHBsb3JlclVybHM7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWRkRXRoZXJldW1DaGFpblBhcmFtZXRlcj8uYmxvY2tFeHBsb3JlclVybHMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tFeHBsb3JlclVybHMgPSBhZGRFdGhlcmV1bUNoYWluUGFyYW1ldGVyLmJsb2NrRXhwbG9yZXJVcmxzO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYmxvY2tFeHBsb3JlcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9ja0V4cGxvcmVyVXJscyA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tFeHBsb3Jlci51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLk9iamVjdC52YWx1ZXMoYmxvY2tFeHBsb3JlcnMpLm1hcCgoeCkgPT4geC51cmwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcnBjVXJscztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhZGRFdGhlcmV1bUNoYWluUGFyYW1ldGVyPy5ycGNVcmxzPy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnBjVXJscyA9IGFkZEV0aGVyZXVtQ2hhaW5QYXJhbWV0ZXIucnBjVXJscztcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBycGNVcmxzID0gW2NoYWluLnJwY1VybHMuZGVmYXVsdD8uaHR0cFswXSA/PyAnJ107XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhZGRFdGhlcmV1bUNoYWluID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrRXhwbG9yZXJVcmxzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYWluSWQ6IG51bWJlclRvSGV4KGNoYWluSWQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYWluTmFtZTogYWRkRXRoZXJldW1DaGFpblBhcmFtZXRlcj8uY2hhaW5OYW1lID8/IGNoYWluLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvblVybHM6IGFkZEV0aGVyZXVtQ2hhaW5QYXJhbWV0ZXI/Lmljb25VcmxzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZUN1cnJlbmN5OiBhZGRFdGhlcmV1bUNoYWluUGFyYW1ldGVyPy5uYXRpdmVDdXJyZW5jeSA/P1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFpbi5uYXRpdmVDdXJyZW5jeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBycGNVcmxzLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ3dhbGxldF9hZGRFdGhlcmV1bUNoYWluJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBbYWRkRXRoZXJldW1DaGFpbl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50Q2hhaW5JZCA9IGF3YWl0IHRoaXMuZ2V0Q2hhaW5JZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudENoYWluSWQgPT09IGNoYWluSWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuZW1pdHRlci5lbWl0KCdjaGFuZ2UnLCB7IGNoYWluSWQgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBVc2VyUmVqZWN0ZWRSZXF1ZXN0RXJyb3IobmV3IEVycm9yKCdVc2VyIHJlamVjdGVkIHN3aXRjaCBhZnRlciBhZGRpbmcgbmV0d29yay4nKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoYWluO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVzZXJSZWplY3RlZFJlcXVlc3RFcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09IFVzZXJSZWplY3RlZFJlcXVlc3RFcnJvci5jb2RlKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVXNlclJlamVjdGVkUmVxdWVzdEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3dpdGNoQ2hhaW5FcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIG9uQWNjb3VudHNDaGFuZ2VkKGFjY291bnRzKSB7XG4gICAgICAgICAgICAvLyBEaXNjb25uZWN0IGlmIHRoZXJlIGFyZSBubyBhY2NvdW50c1xuICAgICAgICAgICAgaWYgKGFjY291bnRzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgICAgICB0aGlzLm9uRGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgLy8gQ29ubmVjdCBpZiBlbWl0dGVyIGlzIGxpc3RlbmluZyBmb3IgY29ubmVjdCBldmVudCAoZS5nLiBpcyBkaXNjb25uZWN0ZWQgYW5kIGNvbm5lY3RzIHRocm91Z2ggd2FsbGV0IGludGVyZmFjZSlcbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbmZpZy5lbWl0dGVyLmxpc3RlbmVyQ291bnQoJ2Nvbm5lY3QnKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoYWluSWQgPSAoYXdhaXQgdGhpcy5nZXRDaGFpbklkKCkpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkNvbm5lY3QoeyBjaGFpbklkIH0pO1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBkaXNjb25uZWN0ZWQgc2hpbSBpZiBpdCBleGlzdHNcbiAgICAgICAgICAgICAgICBpZiAoc2hpbURpc2Nvbm5lY3QpXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGNvbmZpZy5zdG9yYWdlPy5yZW1vdmVJdGVtKGAke3RoaXMuaWR9LmRpc2Nvbm5lY3RlZGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmVndWxhciBjaGFuZ2UgZXZlbnRcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBjb25maWcuZW1pdHRlci5lbWl0KCdjaGFuZ2UnLCB7XG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRzOiBhY2NvdW50cy5tYXAoKHgpID0+IGdldEFkZHJlc3MoeCkpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBvbkNoYWluQ2hhbmdlZChjaGFpbikge1xuICAgICAgICAgICAgY29uc3QgY2hhaW5JZCA9IE51bWJlcihjaGFpbik7XG4gICAgICAgICAgICBjb25maWcuZW1pdHRlci5lbWl0KCdjaGFuZ2UnLCB7IGNoYWluSWQgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIG9uQ29ubmVjdChjb25uZWN0SW5mbykge1xuICAgICAgICAgICAgY29uc3QgYWNjb3VudHMgPSBhd2FpdCB0aGlzLmdldEFjY291bnRzKCk7XG4gICAgICAgICAgICBpZiAoYWNjb3VudHMubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IGNoYWluSWQgPSBOdW1iZXIoY29ubmVjdEluZm8uY2hhaW5JZCk7XG4gICAgICAgICAgICBjb25maWcuZW1pdHRlci5lbWl0KCdjb25uZWN0JywgeyBhY2NvdW50cywgY2hhaW5JZCB9KTtcbiAgICAgICAgICAgIC8vIE1hbmFnZSBFSVAtMTE5MyBldmVudCBsaXN0ZW5lcnNcbiAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVyID0gYXdhaXQgdGhpcy5nZXRQcm92aWRlcigpO1xuICAgICAgICAgICAgaWYgKHByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbm5lY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXIucmVtb3ZlTGlzdGVuZXIoJ2Nvbm5lY3QnLCBjb25uZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFhY2NvdW50c0NoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudHNDaGFuZ2VkID0gdGhpcy5vbkFjY291bnRzQ2hhbmdlZC5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlci5vbignYWNjb3VudHNDaGFuZ2VkJywgYWNjb3VudHNDaGFuZ2VkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFjaGFpbkNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhaW5DaGFuZ2VkID0gdGhpcy5vbkNoYWluQ2hhbmdlZC5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlci5vbignY2hhaW5DaGFuZ2VkJywgY2hhaW5DaGFuZ2VkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFkaXNjb25uZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc2Nvbm5lY3QgPSB0aGlzLm9uRGlzY29ubmVjdC5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlci5vbignZGlzY29ubmVjdCcsIGRpc2Nvbm5lY3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgb25EaXNjb25uZWN0KGVycm9yKSB7XG4gICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IGF3YWl0IHRoaXMuZ2V0UHJvdmlkZXIoKTtcbiAgICAgICAgICAgIC8vIElmIE1ldGFNYXNrIGVtaXRzIGEgYGNvZGU6IDEwMTNgIGVycm9yLCB3YWl0IGZvciByZWNvbm5lY3Rpb24gYmVmb3JlIGRpc2Nvbm5lY3RpbmdcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9NZXRhTWFzay9wcm92aWRlcnMvcHVsbC8xMjBcbiAgICAgICAgICAgIGlmIChlcnJvciAmJiBlcnJvci5jb2RlID09PSAxMDEzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3ZpZGVyICYmICEhKGF3YWl0IHRoaXMuZ2V0QWNjb3VudHMoKSkubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBObyBuZWVkIHRvIHJlbW92ZSBgJHt0aGlzLmlkfS5kaXNjb25uZWN0ZWRgIGZyb20gc3RvcmFnZSBiZWNhdXNlIGBvbkRpc2Nvbm5lY3RgIGlzIHR5cGljYWxseVxuICAgICAgICAgICAgLy8gb25seSBjYWxsZWQgd2hlbiB0aGUgd2FsbGV0IGlzIGRpc2Nvbm5lY3RlZCB0aHJvdWdoIHRoZSB3YWxsZXQncyBpbnRlcmZhY2UsIG1lYW5pbmcgdGhlIHdhbGxldFxuICAgICAgICAgICAgLy8gYWN0dWFsbHkgZGlzY29ubmVjdGVkIGFuZCB3ZSBkb24ndCBuZWVkIHRvIHNpbXVsYXRlIGl0LlxuICAgICAgICAgICAgY29uZmlnLmVtaXR0ZXIuZW1pdCgnZGlzY29ubmVjdCcpO1xuICAgICAgICAgICAgLy8gTWFuYWdlIEVJUC0xMTkzIGV2ZW50IGxpc3RlbmVyc1xuICAgICAgICAgICAgaWYgKHByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoYWluQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlci5yZW1vdmVMaXN0ZW5lcignY2hhaW5DaGFuZ2VkJywgY2hhaW5DaGFuZ2VkKTtcbiAgICAgICAgICAgICAgICAgICAgY2hhaW5DaGFuZ2VkID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZGlzY29ubmVjdCkge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlci5yZW1vdmVMaXN0ZW5lcignZGlzY29ubmVjdCcsIGRpc2Nvbm5lY3QpO1xuICAgICAgICAgICAgICAgICAgICBkaXNjb25uZWN0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWNvbm5lY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgY29ubmVjdCA9IHRoaXMub25Db25uZWN0LmJpbmQodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyLm9uKCdjb25uZWN0JywgY29ubmVjdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pKTtcbn1cbmNvbnN0IHRhcmdldE1hcCA9IHtcbiAgICBjb2luYmFzZVdhbGxldDoge1xuICAgICAgICBpZDogJ2NvaW5iYXNlV2FsbGV0JyxcbiAgICAgICAgbmFtZTogJ0NvaW5iYXNlIFdhbGxldCcsXG4gICAgICAgIHByb3ZpZGVyKHdpbmRvdykge1xuICAgICAgICAgICAgaWYgKHdpbmRvdz8uY29pbmJhc2VXYWxsZXRFeHRlbnNpb24pXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5jb2luYmFzZVdhbGxldEV4dGVuc2lvbjtcbiAgICAgICAgICAgIHJldHVybiBmaW5kUHJvdmlkZXIod2luZG93LCAnaXNDb2luYmFzZVdhbGxldCcpO1xuICAgICAgICB9LFxuICAgIH0sXG4gICAgbWV0YU1hc2s6IHtcbiAgICAgICAgaWQ6ICdtZXRhTWFzaycsXG4gICAgICAgIG5hbWU6ICdNZXRhTWFzaycsXG4gICAgICAgIHByb3ZpZGVyKHdpbmRvdykge1xuICAgICAgICAgICAgcmV0dXJuIGZpbmRQcm92aWRlcih3aW5kb3csIChwcm92aWRlcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghcHJvdmlkZXIuaXNNZXRhTWFzaylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIC8vIEJyYXZlIHRyaWVzIHRvIG1ha2UgaXRzZWxmIGxvb2sgbGlrZSBNZXRhTWFza1xuICAgICAgICAgICAgICAgIC8vIENvdWxkIGFsc28gdHJ5IFJQQyBgd2ViM19jbGllbnRWZXJzaW9uYCBpZiBmb2xsb3dpbmcgaXMgdW5yZWxpYWJsZVxuICAgICAgICAgICAgICAgIGlmIChwcm92aWRlci5pc0JyYXZlV2FsbGV0ICYmICFwcm92aWRlci5fZXZlbnRzICYmICFwcm92aWRlci5fc3RhdGUpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAvLyBPdGhlciB3YWxsZXRzIHRoYXQgdHJ5IHRvIGxvb2sgbGlrZSBNZXRhTWFza1xuICAgICAgICAgICAgICAgIGNvbnN0IGZsYWdzID0gW1xuICAgICAgICAgICAgICAgICAgICAnaXNBcGV4V2FsbGV0JyxcbiAgICAgICAgICAgICAgICAgICAgJ2lzQXZhbGFuY2hlJyxcbiAgICAgICAgICAgICAgICAgICAgJ2lzQml0S2VlcCcsXG4gICAgICAgICAgICAgICAgICAgICdpc0Jsb2NrV2FsbGV0JyxcbiAgICAgICAgICAgICAgICAgICAgJ2lzS3VDb2luV2FsbGV0JyxcbiAgICAgICAgICAgICAgICAgICAgJ2lzTWF0aFdhbGxldCcsXG4gICAgICAgICAgICAgICAgICAgICdpc09reFdhbGxldCcsXG4gICAgICAgICAgICAgICAgICAgICdpc09LRXhXYWxsZXQnLFxuICAgICAgICAgICAgICAgICAgICAnaXNPbmVJbmNoSU9TV2FsbGV0JyxcbiAgICAgICAgICAgICAgICAgICAgJ2lzT25lSW5jaEFuZHJvaWRXYWxsZXQnLFxuICAgICAgICAgICAgICAgICAgICAnaXNPcGVyYScsXG4gICAgICAgICAgICAgICAgICAgICdpc1BoYW50b20nLFxuICAgICAgICAgICAgICAgICAgICAnaXNQb3J0YWwnLFxuICAgICAgICAgICAgICAgICAgICAnaXNSYWJieScsXG4gICAgICAgICAgICAgICAgICAgICdpc1Rva2VuUG9ja2V0JyxcbiAgICAgICAgICAgICAgICAgICAgJ2lzVG9rZW5hcnknLFxuICAgICAgICAgICAgICAgICAgICAnaXNVbmlzd2FwV2FsbGV0JyxcbiAgICAgICAgICAgICAgICAgICAgJ2lzWmVyaW9uJyxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZmxhZyBvZiBmbGFncylcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3ZpZGVyW2ZsYWddKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBwaGFudG9tOiB7XG4gICAgICAgIGlkOiAncGhhbnRvbScsXG4gICAgICAgIG5hbWU6ICdQaGFudG9tJyxcbiAgICAgICAgcHJvdmlkZXIod2luZG93KSB7XG4gICAgICAgICAgICBpZiAod2luZG93Py5waGFudG9tPy5ldGhlcmV1bSlcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LnBoYW50b20/LmV0aGVyZXVtO1xuICAgICAgICAgICAgcmV0dXJuIGZpbmRQcm92aWRlcih3aW5kb3csICdpc1BoYW50b20nKTtcbiAgICAgICAgfSxcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGZpbmRQcm92aWRlcih3aW5kb3csIHNlbGVjdCkge1xuICAgIGZ1bmN0aW9uIGlzUHJvdmlkZXIocHJvdmlkZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZWxlY3QgPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0KHByb3ZpZGVyKTtcbiAgICAgICAgaWYgKHR5cGVvZiBzZWxlY3QgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgcmV0dXJuIHByb3ZpZGVyW3NlbGVjdF07XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBldGhlcmV1bSA9IHdpbmRvdy5ldGhlcmV1bTtcbiAgICBpZiAoZXRoZXJldW0/LnByb3ZpZGVycylcbiAgICAgICAgcmV0dXJuIGV0aGVyZXVtLnByb3ZpZGVycy5maW5kKChwcm92aWRlcikgPT4gaXNQcm92aWRlcihwcm92aWRlcikpO1xuICAgIGlmIChldGhlcmV1bSAmJiBpc1Byb3ZpZGVyKGV0aGVyZXVtKSlcbiAgICAgICAgcmV0dXJuIGV0aGVyZXVtO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmplY3RlZC5qcy5tYXAiXSwibmFtZXMiOlsiZ2V0QWRkcmVzcyIsIm51bWJlclRvSGV4IiwiUmVzb3VyY2VVbmF2YWlsYWJsZVJwY0Vycm9yIiwiU3dpdGNoQ2hhaW5FcnJvciIsIlVzZXJSZWplY3RlZFJlcXVlc3RFcnJvciIsIndpdGhSZXRyeSIsIndpdGhUaW1lb3V0IiwiQ2hhaW5Ob3RDb25maWd1cmVkRXJyb3IiLCJQcm92aWRlck5vdEZvdW5kRXJyb3IiLCJjcmVhdGVDb25uZWN0b3IiLCJpbmplY3RlZCIsInR5cGUiLCJwYXJhbWV0ZXJzIiwic2hpbURpc2Nvbm5lY3QiLCJ1bnN0YWJsZV9zaGltQXN5bmNJbmplY3QiLCJnZXRUYXJnZXQiLCJ0YXJnZXQiLCJyZXN1bHQiLCJ0YXJnZXRNYXAiLCJpZCIsIm5hbWUiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwicHJvdmlkZXIiLCJ3aW5kb3ciLCJldGhlcmV1bSIsImFjY291bnRzQ2hhbmdlZCIsImNoYWluQ2hhbmdlZCIsImNvbm5lY3QiLCJkaXNjb25uZWN0IiwiY29uZmlnIiwiaWNvbiIsInN1cHBvcnRzU2ltdWxhdGlvbiIsInNldHVwIiwiZ2V0UHJvdmlkZXIiLCJvbiIsIm9uQ29ubmVjdCIsImJpbmQiLCJvbkFjY291bnRzQ2hhbmdlZCIsImNoYWluSWQiLCJpc1JlY29ubmVjdGluZyIsImFjY291bnRzIiwiZ2V0QWNjb3VudHMiLCJjYXRjaCIsInBlcm1pc3Npb25zIiwicmVxdWVzdCIsIm1ldGhvZCIsInBhcmFtcyIsImV0aF9hY2NvdW50cyIsImNhdmVhdHMiLCJ2YWx1ZSIsIm1hcCIsIngiLCJsZW5ndGgiLCJzb3J0ZWRBY2NvdW50cyIsImVyciIsImVycm9yIiwiY29kZSIsInJlcXVlc3RlZEFjY291bnRzIiwicmVtb3ZlTGlzdGVuZXIiLCJ1bmRlZmluZWQiLCJvbkNoYWluQ2hhbmdlZCIsIm9uRGlzY29ubmVjdCIsImN1cnJlbnRDaGFpbklkIiwiZ2V0Q2hhaW5JZCIsImNoYWluIiwic3dpdGNoQ2hhaW4iLCJzdG9yYWdlIiwicmVtb3ZlSXRlbSIsInNldEl0ZW0iLCJ0aW1lb3V0IiwiaGV4Q2hhaW5JZCIsIk51bWJlciIsImZpbmRQcm92aWRlciIsIm9mZiIsImlzQXV0aG9yaXplZCIsImlzRGlzY29ubmVjdGVkIiwiZ2V0SXRlbSIsImNvbm5lY3RlZCIsImhhbmRsZUV0aGVyZXVtIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlcyIsIlByb21pc2UiLCJyYWNlIiwicmVzb2x2ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbmNlIiwic2V0VGltZW91dCIsImFkZEV0aGVyZXVtQ2hhaW5QYXJhbWV0ZXIiLCJjaGFpbnMiLCJmaW5kIiwicHJvbWlzZSIsImxpc3RlbmVyIiwiZGF0YSIsImVtaXR0ZXIiLCJhbGwiLCJ0aGVuIiwiZW1pdCIsIm9yaWdpbmFsRXJyb3IiLCJkZWZhdWx0IiwiYmxvY2tFeHBsb3JlciIsImJsb2NrRXhwbG9yZXJzIiwiYmxvY2tFeHBsb3JlclVybHMiLCJ1cmwiLCJPYmplY3QiLCJ2YWx1ZXMiLCJycGNVcmxzIiwiaHR0cCIsImFkZEV0aGVyZXVtQ2hhaW4iLCJjaGFpbk5hbWUiLCJpY29uVXJscyIsIm5hdGl2ZUN1cnJlbmN5IiwiRXJyb3IiLCJsaXN0ZW5lckNvdW50IiwidG9TdHJpbmciLCJjb25uZWN0SW5mbyIsImNvaW5iYXNlV2FsbGV0IiwiY29pbmJhc2VXYWxsZXRFeHRlbnNpb24iLCJtZXRhTWFzayIsImlzTWV0YU1hc2siLCJpc0JyYXZlV2FsbGV0IiwiX2V2ZW50cyIsIl9zdGF0ZSIsImZsYWdzIiwiZmxhZyIsInBoYW50b20iLCJzZWxlY3QiLCJpc1Byb3ZpZGVyIiwicHJvdmlkZXJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/connectors/injected.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/createConfig.js":
/*!*******************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/createConfig.js ***!
  \*******************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createConfig: () => (/* binding */ createConfig)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/.pnpm/viem@2.33.3_bufferutil@4.0.9_typescript@5.2.2_utf-8-validate@5.0.10_zod@3.25.76/node_modules/viem/_esm/clients/createClient.js\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! zustand/middleware */ \"(ssr)/./node_modules/.pnpm/zustand@5.0.0_@types+react@18.2.37_react@18.2.0_use-sync-external-store@1.4.0_react@18.2.0_/node_modules/zustand/esm/middleware.mjs\");\n/* harmony import */ var zustand_vanilla__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand/vanilla */ \"(ssr)/./node_modules/.pnpm/zustand@5.0.0_@types+react@18.2.37_react@18.2.0_use-sync-external-store@1.4.0_react@18.2.0_/node_modules/zustand/esm/vanilla.mjs\");\n/* harmony import */ var _connectors_injected_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./connectors/injected.js */ \"(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/connectors/injected.js\");\n/* harmony import */ var _createEmitter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./createEmitter.js */ \"(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/createEmitter.js\");\n/* harmony import */ var _createStorage_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createStorage.js */ \"(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/createStorage.js\");\n/* harmony import */ var _errors_config_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./errors/config.js */ \"(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/errors/config.js\");\n/* harmony import */ var _utils_uid_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/uid.js */ \"(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/utils/uid.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./version.js */ \"(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/version.js\");\n\n\n\n\n\n\n\n\n\n\nfunction createConfig(parameters) {\n    const { multiInjectedProviderDiscovery = true, storage = (0,_createStorage_js__WEBPACK_IMPORTED_MODULE_0__.createStorage)({\n        storage: (0,_createStorage_js__WEBPACK_IMPORTED_MODULE_0__.getDefaultStorage)()\n    }), syncConnectedChain = true, ssr = false, ...rest } = parameters;\n    /////////////////////////////////////////////////////////////////////////////////////////////////\n    // Set up connectors, clients, etc.\n    /////////////////////////////////////////////////////////////////////////////////////////////////\n    const mipd =  false ? 0 : undefined;\n    const chains = (0,zustand_vanilla__WEBPACK_IMPORTED_MODULE_1__.createStore)(()=>rest.chains);\n    const connectors = (0,zustand_vanilla__WEBPACK_IMPORTED_MODULE_1__.createStore)(()=>{\n        const collection = [];\n        const rdnsSet = new Set();\n        for (const connectorFns of rest.connectors ?? []){\n            const connector = setup(connectorFns);\n            collection.push(connector);\n            if (!ssr && connector.rdns) {\n                const rdnsValues = typeof connector.rdns === \"string\" ? [\n                    connector.rdns\n                ] : connector.rdns;\n                for (const rdns of rdnsValues){\n                    rdnsSet.add(rdns);\n                }\n            }\n        }\n        if (!ssr && mipd) {\n            const providers = mipd.getProviders();\n            for (const provider of providers){\n                if (rdnsSet.has(provider.info.rdns)) continue;\n                collection.push(setup(providerDetailToConnector(provider)));\n            }\n        }\n        return collection;\n    });\n    function setup(connectorFn) {\n        // Set up emitter with uid and add to connector so they are \"linked\" together.\n        const emitter = (0,_createEmitter_js__WEBPACK_IMPORTED_MODULE_2__.createEmitter)((0,_utils_uid_js__WEBPACK_IMPORTED_MODULE_3__.uid)());\n        const connector = {\n            ...connectorFn({\n                emitter,\n                chains: chains.getState(),\n                storage,\n                transports: rest.transports\n            }),\n            emitter,\n            uid: emitter.uid\n        };\n        // Start listening for `connect` events on connector setup\n        // This allows connectors to \"connect\" themselves without user interaction (e.g. MetaMask's \"Manually connect to current site\")\n        emitter.on(\"connect\", connect);\n        connector.setup?.();\n        return connector;\n    }\n    function providerDetailToConnector(providerDetail) {\n        const { info } = providerDetail;\n        const provider = providerDetail.provider;\n        return (0,_connectors_injected_js__WEBPACK_IMPORTED_MODULE_4__.injected)({\n            target: {\n                ...info,\n                id: info.rdns,\n                provider\n            }\n        });\n    }\n    const clients = new Map();\n    function getClient(config = {}) {\n        const chainId = config.chainId ?? store.getState().chainId;\n        const chain = chains.getState().find((x)=>x.id === chainId);\n        // chainId specified and not configured\n        if (config.chainId && !chain) throw new _errors_config_js__WEBPACK_IMPORTED_MODULE_5__.ChainNotConfiguredError();\n        {\n            const client = clients.get(store.getState().chainId);\n            if (client && !chain) return client;\n            if (!chain) throw new _errors_config_js__WEBPACK_IMPORTED_MODULE_5__.ChainNotConfiguredError();\n        }\n        // If a memoized client exists for a chain id, use that.\n        {\n            const client = clients.get(chainId);\n            if (client) return client;\n        }\n        let client;\n        if (rest.client) client = rest.client({\n            chain\n        });\n        else {\n            const chainId = chain.id;\n            const chainIds = chains.getState().map((x)=>x.id);\n            // Grab all properties off `rest` and resolve for use in `createClient`\n            const properties = {};\n            const entries = Object.entries(rest);\n            for (const [key, value] of entries){\n                if (key === \"chains\" || key === \"client\" || key === \"connectors\" || key === \"transports\") continue;\n                if (typeof value === \"object\") {\n                    // check if value is chainId-specific since some values can be objects\n                    // e.g. { batch: { multicall: { batchSize: 1024 } } }\n                    if (chainId in value) properties[key] = value[chainId];\n                    else {\n                        // check if value is chainId-specific, but does not have value for current chainId\n                        const hasChainSpecificValue = chainIds.some((x)=>x in value);\n                        if (hasChainSpecificValue) continue;\n                        properties[key] = value;\n                    }\n                } else properties[key] = value;\n            }\n            client = (0,viem__WEBPACK_IMPORTED_MODULE_6__.createClient)({\n                ...properties,\n                chain,\n                batch: properties.batch ?? {\n                    multicall: true\n                },\n                transport: (parameters)=>rest.transports[chainId]({\n                        ...parameters,\n                        connectors\n                    })\n            });\n        }\n        clients.set(chainId, client);\n        return client;\n    }\n    /////////////////////////////////////////////////////////////////////////////////////////////////\n    // Create store\n    /////////////////////////////////////////////////////////////////////////////////////////////////\n    function getInitialState() {\n        return {\n            chainId: chains.getState()[0].id,\n            connections: new Map(),\n            current: null,\n            status: \"disconnected\"\n        };\n    }\n    let currentVersion;\n    const prefix = \"0.0.0-canary-\";\n    if (_version_js__WEBPACK_IMPORTED_MODULE_7__.version.startsWith(prefix)) currentVersion = Number.parseInt(_version_js__WEBPACK_IMPORTED_MODULE_7__.version.replace(prefix, \"\"));\n    else currentVersion = Number.parseInt(_version_js__WEBPACK_IMPORTED_MODULE_7__.version.split(\".\")[0] ?? \"0\");\n    const store = (0,zustand_vanilla__WEBPACK_IMPORTED_MODULE_1__.createStore)((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_8__.subscribeWithSelector)(// only use persist middleware if storage exists\n    storage ? (0,zustand_middleware__WEBPACK_IMPORTED_MODULE_8__.persist)(getInitialState, {\n        migrate (persistedState, version) {\n            if (version === currentVersion) return persistedState;\n            const initialState = getInitialState();\n            const chainId = validatePersistedChainId(persistedState, initialState.chainId);\n            return {\n                ...initialState,\n                chainId\n            };\n        },\n        name: \"store\",\n        partialize (state) {\n            // Only persist \"critical\" store properties to preserve storage size.\n            return {\n                connections: {\n                    __type: \"Map\",\n                    value: Array.from(state.connections.entries()).map(([key, connection])=>{\n                        const { id, name, type, uid } = connection.connector;\n                        const connector = {\n                            id,\n                            name,\n                            type,\n                            uid\n                        };\n                        return [\n                            key,\n                            {\n                                ...connection,\n                                connector\n                            }\n                        ];\n                    })\n                },\n                chainId: state.chainId,\n                current: state.current\n            };\n        },\n        merge (persistedState, currentState) {\n            // `status` should not be persisted as it messes with reconnection\n            if (typeof persistedState === \"object\" && persistedState && \"status\" in persistedState) delete persistedState.status;\n            // Make sure persisted `chainId` is valid\n            const chainId = validatePersistedChainId(persistedState, currentState.chainId);\n            return {\n                ...currentState,\n                ...persistedState,\n                chainId\n            };\n        },\n        skipHydration: ssr,\n        storage: storage,\n        version: currentVersion\n    }) : getInitialState));\n    store.setState(getInitialState());\n    function validatePersistedChainId(persistedState, defaultChainId) {\n        return persistedState && typeof persistedState === \"object\" && \"chainId\" in persistedState && typeof persistedState.chainId === \"number\" && chains.getState().some((x)=>x.id === persistedState.chainId) ? persistedState.chainId : defaultChainId;\n    }\n    /////////////////////////////////////////////////////////////////////////////////////////////////\n    // Subscribe to changes\n    /////////////////////////////////////////////////////////////////////////////////////////////////\n    // Update default chain when connector chain changes\n    if (syncConnectedChain) store.subscribe(({ connections, current })=>current ? connections.get(current)?.chainId : undefined, (chainId)=>{\n        // If chain is not configured, then don't switch over to it.\n        const isChainConfigured = chains.getState().some((x)=>x.id === chainId);\n        if (!isChainConfigured) return;\n        return store.setState((x)=>({\n                ...x,\n                chainId: chainId ?? x.chainId\n            }));\n    });\n    // EIP-6963 subscribe for new wallet providers\n    mipd?.subscribe((providerDetails)=>{\n        const connectorIdSet = new Set();\n        const connectorRdnsSet = new Set();\n        for (const connector of connectors.getState()){\n            connectorIdSet.add(connector.id);\n            if (connector.rdns) {\n                const rdnsValues = typeof connector.rdns === \"string\" ? [\n                    connector.rdns\n                ] : connector.rdns;\n                for (const rdns of rdnsValues){\n                    connectorRdnsSet.add(rdns);\n                }\n            }\n        }\n        const newConnectors = [];\n        for (const providerDetail of providerDetails){\n            if (connectorRdnsSet.has(providerDetail.info.rdns)) continue;\n            const connector = setup(providerDetailToConnector(providerDetail));\n            if (connectorIdSet.has(connector.id)) continue;\n            newConnectors.push(connector);\n        }\n        if (storage && !store.persist.hasHydrated()) return;\n        connectors.setState((x)=>[\n                ...x,\n                ...newConnectors\n            ], true);\n    });\n    /////////////////////////////////////////////////////////////////////////////////////////////////\n    // Emitter listeners\n    /////////////////////////////////////////////////////////////////////////////////////////////////\n    function change(data) {\n        store.setState((x)=>{\n            const connection = x.connections.get(data.uid);\n            if (!connection) return x;\n            return {\n                ...x,\n                connections: new Map(x.connections).set(data.uid, {\n                    accounts: data.accounts ?? connection.accounts,\n                    chainId: data.chainId ?? connection.chainId,\n                    connector: connection.connector\n                })\n            };\n        });\n    }\n    function connect(data) {\n        // Disable handling if reconnecting/connecting\n        if (store.getState().status === \"connecting\" || store.getState().status === \"reconnecting\") return;\n        store.setState((x)=>{\n            const connector = connectors.getState().find((x)=>x.uid === data.uid);\n            if (!connector) return x;\n            if (connector.emitter.listenerCount(\"connect\")) connector.emitter.off(\"connect\", change);\n            if (!connector.emitter.listenerCount(\"change\")) connector.emitter.on(\"change\", change);\n            if (!connector.emitter.listenerCount(\"disconnect\")) connector.emitter.on(\"disconnect\", disconnect);\n            return {\n                ...x,\n                connections: new Map(x.connections).set(data.uid, {\n                    accounts: data.accounts,\n                    chainId: data.chainId,\n                    connector: connector\n                }),\n                current: data.uid,\n                status: \"connected\"\n            };\n        });\n    }\n    function disconnect(data) {\n        store.setState((x)=>{\n            const connection = x.connections.get(data.uid);\n            if (connection) {\n                const connector = connection.connector;\n                if (connector.emitter.listenerCount(\"change\")) connection.connector.emitter.off(\"change\", change);\n                if (connector.emitter.listenerCount(\"disconnect\")) connection.connector.emitter.off(\"disconnect\", disconnect);\n                if (!connector.emitter.listenerCount(\"connect\")) connection.connector.emitter.on(\"connect\", connect);\n            }\n            x.connections.delete(data.uid);\n            if (x.connections.size === 0) return {\n                ...x,\n                connections: new Map(),\n                current: null,\n                status: \"disconnected\"\n            };\n            const nextConnection = x.connections.values().next().value;\n            return {\n                ...x,\n                connections: new Map(x.connections),\n                current: nextConnection.connector.uid\n            };\n        });\n    }\n    return {\n        get chains () {\n            return chains.getState();\n        },\n        get connectors () {\n            return connectors.getState();\n        },\n        storage,\n        getClient,\n        get state () {\n            return store.getState();\n        },\n        setState (value) {\n            let newState;\n            if (typeof value === \"function\") newState = value(store.getState());\n            else newState = value;\n            // Reset state if it got set to something not matching the base state\n            const initialState = getInitialState();\n            if (typeof newState !== \"object\") newState = initialState;\n            const isCorrupt = Object.keys(initialState).some((x)=>!(x in newState));\n            if (isCorrupt) newState = initialState;\n            store.setState(newState, true);\n        },\n        subscribe (selector, listener, options) {\n            return store.subscribe(selector, listener, options ? {\n                ...options,\n                fireImmediately: options.emitImmediately\n            } : undefined);\n        },\n        _internal: {\n            mipd,\n            store,\n            ssr: Boolean(ssr),\n            syncConnectedChain,\n            transports: rest.transports,\n            chains: {\n                setState (value) {\n                    const nextChains = typeof value === \"function\" ? value(chains.getState()) : value;\n                    if (nextChains.length === 0) return;\n                    return chains.setState(nextChains, true);\n                },\n                subscribe (listener) {\n                    return chains.subscribe(listener);\n                }\n            },\n            connectors: {\n                providerDetailToConnector,\n                setup: setup,\n                setState (value) {\n                    return connectors.setState(typeof value === \"function\" ? value(connectors.getState()) : value, true);\n                },\n                subscribe (listener) {\n                    return connectors.subscribe(listener);\n                }\n            },\n            events: {\n                change,\n                connect,\n                disconnect\n            }\n        }\n    };\n} //# sourceMappingURL=createConfig.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/createConfig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/createEmitter.js":
/*!********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/createEmitter.js ***!
  \********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Emitter: () => (/* binding */ Emitter),\n/* harmony export */   createEmitter: () => (/* binding */ createEmitter)\n/* harmony export */ });\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! eventemitter3 */ \"(ssr)/./node_modules/.pnpm/eventemitter3@5.0.1/node_modules/eventemitter3/index.mjs\");\n\nclass Emitter {\n    constructor(uid){\n        Object.defineProperty(this, \"uid\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: uid\n        });\n        Object.defineProperty(this, \"_emitter\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new eventemitter3__WEBPACK_IMPORTED_MODULE_0__.EventEmitter()\n        });\n    }\n    on(eventName, fn) {\n        this._emitter.on(eventName, fn);\n    }\n    once(eventName, fn) {\n        this._emitter.once(eventName, fn);\n    }\n    off(eventName, fn) {\n        this._emitter.off(eventName, fn);\n    }\n    emit(eventName, ...params) {\n        const data = params[0];\n        this._emitter.emit(eventName, {\n            uid: this.uid,\n            ...data\n        });\n    }\n    listenerCount(eventName) {\n        return this._emitter.listenerCount(eventName);\n    }\n}\nfunction createEmitter(uid) {\n    return new Emitter(uid);\n} //# sourceMappingURL=createEmitter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdhZ21pK2NvcmVAMi4xOS4wX0B0YW5zdGFjaytxdWVyeS1jb3JlQDUuODUuM19AdHlwZXMrcmVhY3RAMTguMi4zN19yZWFjdEAxOC4yLjBfdHlwZXNjXzQwYzZiOTdhZjE5M2UzNGRiM2Q0YzAxOTMzMTQ0MzgzL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29yZS9kaXN0L2VzbS9jcmVhdGVFbWl0dGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QztBQUN0QyxNQUFNQztJQUNUQyxZQUFZQyxHQUFHLENBQUU7UUFDYkMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxPQUFPO1lBQy9CQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPTjtRQUNYO1FBQ0FDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsWUFBWTtZQUNwQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxJQUFJVCx1REFBWUE7UUFDM0I7SUFDSjtJQUNBVSxHQUFHQyxTQUFTLEVBQUVDLEVBQUUsRUFBRTtRQUNkLElBQUksQ0FBQ0MsUUFBUSxDQUFDSCxFQUFFLENBQUNDLFdBQVdDO0lBQ2hDO0lBQ0FFLEtBQUtILFNBQVMsRUFBRUMsRUFBRSxFQUFFO1FBQ2hCLElBQUksQ0FBQ0MsUUFBUSxDQUFDQyxJQUFJLENBQUNILFdBQVdDO0lBQ2xDO0lBQ0FHLElBQUlKLFNBQVMsRUFBRUMsRUFBRSxFQUFFO1FBQ2YsSUFBSSxDQUFDQyxRQUFRLENBQUNFLEdBQUcsQ0FBQ0osV0FBV0M7SUFDakM7SUFDQUksS0FBS0wsU0FBUyxFQUFFLEdBQUdNLE1BQU0sRUFBRTtRQUN2QixNQUFNQyxPQUFPRCxNQUFNLENBQUMsRUFBRTtRQUN0QixJQUFJLENBQUNKLFFBQVEsQ0FBQ0csSUFBSSxDQUFDTCxXQUFXO1lBQUVSLEtBQUssSUFBSSxDQUFDQSxHQUFHO1lBQUUsR0FBR2UsSUFBSTtRQUFDO0lBQzNEO0lBQ0FDLGNBQWNSLFNBQVMsRUFBRTtRQUNyQixPQUFPLElBQUksQ0FBQ0UsUUFBUSxDQUFDTSxhQUFhLENBQUNSO0lBQ3ZDO0FBQ0o7QUFDTyxTQUFTUyxjQUFjakIsR0FBRztJQUM3QixPQUFPLElBQUlGLFFBQVFFO0FBQ3ZCLEVBQ0EseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3BhY2UtanVtcC1nYW1lLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B3YWdtaStjb3JlQDIuMTkuMF9AdGFuc3RhY2srcXVlcnktY29yZUA1Ljg1LjNfQHR5cGVzK3JlYWN0QDE4LjIuMzdfcmVhY3RAMTguMi4wX3R5cGVzY180MGM2Yjk3YWYxOTNlMzRkYjNkNGMwMTkzMzE0NDM4My9ub2RlX21vZHVsZXMvQHdhZ21pL2NvcmUvZGlzdC9lc20vY3JlYXRlRW1pdHRlci5qcz82MTMxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50ZW1pdHRlcjMnO1xuZXhwb3J0IGNsYXNzIEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKHVpZCkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ1aWRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHVpZFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiX2VtaXR0ZXJcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IG5ldyBFdmVudEVtaXR0ZXIoKVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgb24oZXZlbnROYW1lLCBmbikge1xuICAgICAgICB0aGlzLl9lbWl0dGVyLm9uKGV2ZW50TmFtZSwgZm4pO1xuICAgIH1cbiAgICBvbmNlKGV2ZW50TmFtZSwgZm4pIHtcbiAgICAgICAgdGhpcy5fZW1pdHRlci5vbmNlKGV2ZW50TmFtZSwgZm4pO1xuICAgIH1cbiAgICBvZmYoZXZlbnROYW1lLCBmbikge1xuICAgICAgICB0aGlzLl9lbWl0dGVyLm9mZihldmVudE5hbWUsIGZuKTtcbiAgICB9XG4gICAgZW1pdChldmVudE5hbWUsIC4uLnBhcmFtcykge1xuICAgICAgICBjb25zdCBkYXRhID0gcGFyYW1zWzBdO1xuICAgICAgICB0aGlzLl9lbWl0dGVyLmVtaXQoZXZlbnROYW1lLCB7IHVpZDogdGhpcy51aWQsIC4uLmRhdGEgfSk7XG4gICAgfVxuICAgIGxpc3RlbmVyQ291bnQoZXZlbnROYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbWl0dGVyLmxpc3RlbmVyQ291bnQoZXZlbnROYW1lKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRW1pdHRlcih1aWQpIHtcbiAgICByZXR1cm4gbmV3IEVtaXR0ZXIodWlkKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZUVtaXR0ZXIuanMubWFwIl0sIm5hbWVzIjpbIkV2ZW50RW1pdHRlciIsIkVtaXR0ZXIiLCJjb25zdHJ1Y3RvciIsInVpZCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJvbiIsImV2ZW50TmFtZSIsImZuIiwiX2VtaXR0ZXIiLCJvbmNlIiwib2ZmIiwiZW1pdCIsInBhcmFtcyIsImRhdGEiLCJsaXN0ZW5lckNvdW50IiwiY3JlYXRlRW1pdHRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/createEmitter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/createStorage.js":
/*!********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/createStorage.js ***!
  \********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createStorage: () => (/* binding */ createStorage),\n/* harmony export */   getDefaultStorage: () => (/* binding */ getDefaultStorage),\n/* harmony export */   noopStorage: () => (/* binding */ noopStorage)\n/* harmony export */ });\n/* harmony import */ var _utils_deserialize_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/deserialize.js */ \"(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/utils/deserialize.js\");\n/* harmony import */ var _utils_serialize_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/serialize.js */ \"(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/utils/serialize.js\");\n\n\nfunction createStorage(parameters) {\n    const { deserialize = _utils_deserialize_js__WEBPACK_IMPORTED_MODULE_0__.deserialize, key: prefix = \"wagmi\", serialize = _utils_serialize_js__WEBPACK_IMPORTED_MODULE_1__.serialize, storage = noopStorage } = parameters;\n    function unwrap(value) {\n        if (value instanceof Promise) return value.then((x)=>x).catch(()=>null);\n        return value;\n    }\n    return {\n        ...storage,\n        key: prefix,\n        async getItem (key, defaultValue) {\n            const value = storage.getItem(`${prefix}.${key}`);\n            const unwrapped = await unwrap(value);\n            if (unwrapped) return deserialize(unwrapped) ?? null;\n            return defaultValue ?? null;\n        },\n        async setItem (key, value) {\n            const storageKey = `${prefix}.${key}`;\n            if (value === null) await unwrap(storage.removeItem(storageKey));\n            else await unwrap(storage.setItem(storageKey, serialize(value)));\n        },\n        async removeItem (key) {\n            await unwrap(storage.removeItem(`${prefix}.${key}`));\n        }\n    };\n}\nconst noopStorage = {\n    getItem: ()=>null,\n    setItem: ()=>{},\n    removeItem: ()=>{}\n};\nfunction getDefaultStorage() {\n    const storage = (()=>{\n        if (false) {}\n        return noopStorage;\n    })();\n    return {\n        getItem (key) {\n            return storage.getItem(key);\n        },\n        removeItem (key) {\n            storage.removeItem(key);\n        },\n        setItem (key, value) {\n            try {\n                storage.setItem(key, value);\n            // silence errors by default (QuotaExceededError, SecurityError, etc.)\n            } catch  {}\n        }\n    };\n} //# sourceMappingURL=createStorage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdhZ21pK2NvcmVAMi4xOS4wX0B0YW5zdGFjaytxdWVyeS1jb3JlQDUuODUuM19AdHlwZXMrcmVhY3RAMTguMi4zN19yZWFjdEAxOC4yLjBfdHlwZXNjXzQwYzZiOTdhZjE5M2UzNGRiM2Q0YzAxOTMzMTQ0MzgzL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29yZS9kaXN0L2VzbS9jcmVhdGVTdG9yYWdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXFFO0FBQ047QUFDeEQsU0FBU0ksY0FBY0MsVUFBVTtJQUNwQyxNQUFNLEVBQUVMLGNBQWNDLDhEQUFZLEVBQUVLLEtBQUtDLFNBQVMsT0FBTyxFQUFFTCxZQUFZQywwREFBVSxFQUFFSyxVQUFVQyxXQUFXLEVBQUcsR0FBR0o7SUFDOUcsU0FBU0ssT0FBT0MsS0FBSztRQUNqQixJQUFJQSxpQkFBaUJDLFNBQ2pCLE9BQU9ELE1BQU1FLElBQUksQ0FBQyxDQUFDQyxJQUFNQSxHQUFHQyxLQUFLLENBQUMsSUFBTTtRQUM1QyxPQUFPSjtJQUNYO0lBQ0EsT0FBTztRQUNILEdBQUdILE9BQU87UUFDVkYsS0FBS0M7UUFDTCxNQUFNUyxTQUFRVixHQUFHLEVBQUVXLFlBQVk7WUFDM0IsTUFBTU4sUUFBUUgsUUFBUVEsT0FBTyxDQUFDLENBQUMsRUFBRVQsT0FBTyxDQUFDLEVBQUVELElBQUksQ0FBQztZQUNoRCxNQUFNWSxZQUFZLE1BQU1SLE9BQU9DO1lBQy9CLElBQUlPLFdBQ0EsT0FBT2xCLFlBQVlrQixjQUFjO1lBQ3JDLE9BQVFELGdCQUFnQjtRQUM1QjtRQUNBLE1BQU1FLFNBQVFiLEdBQUcsRUFBRUssS0FBSztZQUNwQixNQUFNUyxhQUFhLENBQUMsRUFBRWIsT0FBTyxDQUFDLEVBQUVELElBQUksQ0FBQztZQUNyQyxJQUFJSyxVQUFVLE1BQ1YsTUFBTUQsT0FBT0YsUUFBUWEsVUFBVSxDQUFDRDtpQkFFaEMsTUFBTVYsT0FBT0YsUUFBUVcsT0FBTyxDQUFDQyxZQUFZbEIsVUFBVVM7UUFDM0Q7UUFDQSxNQUFNVSxZQUFXZixHQUFHO1lBQ2hCLE1BQU1JLE9BQU9GLFFBQVFhLFVBQVUsQ0FBQyxDQUFDLEVBQUVkLE9BQU8sQ0FBQyxFQUFFRCxJQUFJLENBQUM7UUFDdEQ7SUFDSjtBQUNKO0FBQ08sTUFBTUcsY0FBYztJQUN2Qk8sU0FBUyxJQUFNO0lBQ2ZHLFNBQVMsS0FBUTtJQUNqQkUsWUFBWSxLQUFRO0FBQ3hCLEVBQUU7QUFDSyxTQUFTQztJQUNaLE1BQU1kLFVBQVUsQ0FBQztRQUNiLElBQUksS0FBb0QsRUFDcEQsRUFBMkI7UUFDL0IsT0FBT0M7SUFDWDtJQUNBLE9BQU87UUFDSE8sU0FBUVYsR0FBRztZQUNQLE9BQU9FLFFBQVFRLE9BQU8sQ0FBQ1Y7UUFDM0I7UUFDQWUsWUFBV2YsR0FBRztZQUNWRSxRQUFRYSxVQUFVLENBQUNmO1FBQ3ZCO1FBQ0FhLFNBQVFiLEdBQUcsRUFBRUssS0FBSztZQUNkLElBQUk7Z0JBQ0FILFFBQVFXLE9BQU8sQ0FBQ2IsS0FBS0s7WUFDckIsc0VBQXNFO1lBQzFFLEVBQ0EsT0FBTSxDQUFFO1FBQ1o7SUFDSjtBQUNKLEVBQ0EseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3BhY2UtanVtcC1nYW1lLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B3YWdtaStjb3JlQDIuMTkuMF9AdGFuc3RhY2srcXVlcnktY29yZUA1Ljg1LjNfQHR5cGVzK3JlYWN0QDE4LjIuMzdfcmVhY3RAMTguMi4wX3R5cGVzY180MGM2Yjk3YWYxOTNlMzRkYjNkNGMwMTkzMzE0NDM4My9ub2RlX21vZHVsZXMvQHdhZ21pL2NvcmUvZGlzdC9lc20vY3JlYXRlU3RvcmFnZS5qcz9mZmIzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlc2VyaWFsaXplIGFzIGRlc2VyaWFsaXplXyB9IGZyb20gJy4vdXRpbHMvZGVzZXJpYWxpemUuanMnO1xuaW1wb3J0IHsgc2VyaWFsaXplIGFzIHNlcmlhbGl6ZV8gfSBmcm9tICcuL3V0aWxzL3NlcmlhbGl6ZS5qcyc7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RvcmFnZShwYXJhbWV0ZXJzKSB7XG4gICAgY29uc3QgeyBkZXNlcmlhbGl6ZSA9IGRlc2VyaWFsaXplXywga2V5OiBwcmVmaXggPSAnd2FnbWknLCBzZXJpYWxpemUgPSBzZXJpYWxpemVfLCBzdG9yYWdlID0gbm9vcFN0b3JhZ2UsIH0gPSBwYXJhbWV0ZXJzO1xuICAgIGZ1bmN0aW9uIHVud3JhcCh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRoZW4oKHgpID0+IHgpLmNhdGNoKCgpID0+IG51bGwpO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0b3JhZ2UsXG4gICAgICAgIGtleTogcHJlZml4LFxuICAgICAgICBhc3luYyBnZXRJdGVtKGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHN0b3JhZ2UuZ2V0SXRlbShgJHtwcmVmaXh9LiR7a2V5fWApO1xuICAgICAgICAgICAgY29uc3QgdW53cmFwcGVkID0gYXdhaXQgdW53cmFwKHZhbHVlKTtcbiAgICAgICAgICAgIGlmICh1bndyYXBwZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlc2VyaWFsaXplKHVud3JhcHBlZCkgPz8gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiAoZGVmYXVsdFZhbHVlID8/IG51bGwpO1xuICAgICAgICB9LFxuICAgICAgICBhc3luYyBzZXRJdGVtKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0b3JhZ2VLZXkgPSBgJHtwcmVmaXh9LiR7a2V5fWA7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgYXdhaXQgdW53cmFwKHN0b3JhZ2UucmVtb3ZlSXRlbShzdG9yYWdlS2V5KSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgYXdhaXQgdW53cmFwKHN0b3JhZ2Uuc2V0SXRlbShzdG9yYWdlS2V5LCBzZXJpYWxpemUodmFsdWUpKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIHJlbW92ZUl0ZW0oa2V5KSB7XG4gICAgICAgICAgICBhd2FpdCB1bndyYXAoc3RvcmFnZS5yZW1vdmVJdGVtKGAke3ByZWZpeH0uJHtrZXl9YCkpO1xuICAgICAgICB9LFxuICAgIH07XG59XG5leHBvcnQgY29uc3Qgbm9vcFN0b3JhZ2UgPSB7XG4gICAgZ2V0SXRlbTogKCkgPT4gbnVsbCxcbiAgICBzZXRJdGVtOiAoKSA9PiB7IH0sXG4gICAgcmVtb3ZlSXRlbTogKCkgPT4geyB9LFxufTtcbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0U3RvcmFnZSgpIHtcbiAgICBjb25zdCBzdG9yYWdlID0gKCgpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5sb2NhbFN0b3JhZ2UpXG4gICAgICAgICAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgICAgICAgcmV0dXJuIG5vb3BTdG9yYWdlO1xuICAgIH0pKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0SXRlbShrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBzdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlSXRlbShrZXkpIHtcbiAgICAgICAgICAgIHN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICAgICAgICB9LFxuICAgICAgICBzZXRJdGVtKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgc3RvcmFnZS5zZXRJdGVtKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIC8vIHNpbGVuY2UgZXJyb3JzIGJ5IGRlZmF1bHQgKFF1b3RhRXhjZWVkZWRFcnJvciwgU2VjdXJpdHlFcnJvciwgZXRjLilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIHsgfVxuICAgICAgICB9LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVTdG9yYWdlLmpzLm1hcCJdLCJuYW1lcyI6WyJkZXNlcmlhbGl6ZSIsImRlc2VyaWFsaXplXyIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZV8iLCJjcmVhdGVTdG9yYWdlIiwicGFyYW1ldGVycyIsImtleSIsInByZWZpeCIsInN0b3JhZ2UiLCJub29wU3RvcmFnZSIsInVud3JhcCIsInZhbHVlIiwiUHJvbWlzZSIsInRoZW4iLCJ4IiwiY2F0Y2giLCJnZXRJdGVtIiwiZGVmYXVsdFZhbHVlIiwidW53cmFwcGVkIiwic2V0SXRlbSIsInN0b3JhZ2VLZXkiLCJyZW1vdmVJdGVtIiwiZ2V0RGVmYXVsdFN0b3JhZ2UiLCJ3aW5kb3ciLCJsb2NhbFN0b3JhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/createStorage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/errors/base.js":
/*!******************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/errors/base.js ***!
  \******************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseError: () => (/* binding */ BaseError)\n/* harmony export */ });\n/* harmony import */ var _utils_getVersion_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/getVersion.js */ \"(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/utils/getVersion.js\");\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _BaseError_instances, _BaseError_walk;\n\nclass BaseError extends Error {\n    get docsBaseUrl() {\n        return \"https://wagmi.sh/core\";\n    }\n    get version() {\n        return (0,_utils_getVersion_js__WEBPACK_IMPORTED_MODULE_0__.getVersion)();\n    }\n    constructor(shortMessage, options = {}){\n        super();\n        _BaseError_instances.add(this);\n        Object.defineProperty(this, \"details\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"docsPath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metaMessages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"shortMessage\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"WagmiCoreError\"\n        });\n        const details = options.cause instanceof BaseError ? options.cause.details : options.cause?.message ? options.cause.message : options.details;\n        const docsPath = options.cause instanceof BaseError ? options.cause.docsPath || options.docsPath : options.docsPath;\n        this.message = [\n            shortMessage || \"An error occurred.\",\n            \"\",\n            ...options.metaMessages ? [\n                ...options.metaMessages,\n                \"\"\n            ] : [],\n            ...docsPath ? [\n                `Docs: ${this.docsBaseUrl}${docsPath}.html${options.docsSlug ? `#${options.docsSlug}` : \"\"}`\n            ] : [],\n            ...details ? [\n                `Details: ${details}`\n            ] : [],\n            `Version: ${this.version}`\n        ].join(\"\\n\");\n        if (options.cause) this.cause = options.cause;\n        this.details = details;\n        this.docsPath = docsPath;\n        this.metaMessages = options.metaMessages;\n        this.shortMessage = shortMessage;\n    }\n    walk(fn) {\n        return __classPrivateFieldGet(this, _BaseError_instances, \"m\", _BaseError_walk).call(this, this, fn);\n    }\n}\n_BaseError_instances = new WeakSet(), _BaseError_walk = function _BaseError_walk(err, fn) {\n    if (fn?.(err)) return err;\n    if (err.cause) return __classPrivateFieldGet(this, _BaseError_instances, \"m\", _BaseError_walk).call(this, err.cause, fn);\n    return err;\n}; //# sourceMappingURL=base.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/errors/base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/errors/config.js":
/*!********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/errors/config.js ***!
  \********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChainNotConfiguredError: () => (/* binding */ ChainNotConfiguredError),\n/* harmony export */   ConnectorAccountNotFoundError: () => (/* binding */ ConnectorAccountNotFoundError),\n/* harmony export */   ConnectorAlreadyConnectedError: () => (/* binding */ ConnectorAlreadyConnectedError),\n/* harmony export */   ConnectorChainMismatchError: () => (/* binding */ ConnectorChainMismatchError),\n/* harmony export */   ConnectorNotConnectedError: () => (/* binding */ ConnectorNotConnectedError),\n/* harmony export */   ConnectorNotFoundError: () => (/* binding */ ConnectorNotFoundError),\n/* harmony export */   ConnectorUnavailableReconnectingError: () => (/* binding */ ConnectorUnavailableReconnectingError)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/errors/base.js\");\n\nclass ChainNotConfiguredError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor(){\n        super(\"Chain not configured.\");\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"ChainNotConfiguredError\"\n        });\n    }\n}\nclass ConnectorAlreadyConnectedError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor(){\n        super(\"Connector already connected.\");\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"ConnectorAlreadyConnectedError\"\n        });\n    }\n}\nclass ConnectorNotConnectedError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor(){\n        super(\"Connector not connected.\");\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"ConnectorNotConnectedError\"\n        });\n    }\n}\nclass ConnectorNotFoundError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor(){\n        super(\"Connector not found.\");\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"ConnectorNotFoundError\"\n        });\n    }\n}\nclass ConnectorAccountNotFoundError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ address, connector }){\n        super(`Account \"${address}\" not found for connector \"${connector.name}\".`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"ConnectorAccountNotFoundError\"\n        });\n    }\n}\nclass ConnectorChainMismatchError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ connectionChainId, connectorChainId }){\n        super(`The current chain of the connector (id: ${connectorChainId}) does not match the connection's chain (id: ${connectionChainId}).`, {\n            metaMessages: [\n                `Current Chain ID:  ${connectorChainId}`,\n                `Expected Chain ID: ${connectionChainId}`\n            ]\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"ConnectorChainMismatchError\"\n        });\n    }\n}\nclass ConnectorUnavailableReconnectingError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ connector }){\n        super(`Connector \"${connector.name}\" unavailable while reconnecting.`, {\n            details: [\n                \"During the reconnection step, the only connector methods guaranteed to be available are: `id`, `name`, `type`, `uid`.\",\n                \"All other methods are not guaranteed to be available until reconnection completes and connectors are fully restored.\",\n                \"This error commonly occurs for connectors that asynchronously inject after reconnection has already started.\"\n            ].join(\" \")\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"ConnectorUnavailableReconnectingError\"\n        });\n    }\n} //# sourceMappingURL=config.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdhZ21pK2NvcmVAMi4xOS4wX0B0YW5zdGFjaytxdWVyeS1jb3JlQDUuODUuM19AdHlwZXMrcmVhY3RAMTguMi4zN19yZWFjdEAxOC4yLjBfdHlwZXNjXzQwYzZiOTdhZjE5M2UzNGRiM2Q0YzAxOTMzMTQ0MzgzL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29yZS9kaXN0L2VzbS9lcnJvcnMvY29uZmlnLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXNDO0FBQy9CLE1BQU1DLGdDQUFnQ0QsK0NBQVNBO0lBQ2xERSxhQUFjO1FBQ1YsS0FBSyxDQUFDO1FBQ05DLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUTtZQUNoQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO0lBQ0o7QUFDSjtBQUNPLE1BQU1DLHVDQUF1Q1QsK0NBQVNBO0lBQ3pERSxhQUFjO1FBQ1YsS0FBSyxDQUFDO1FBQ05DLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUTtZQUNoQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO0lBQ0o7QUFDSjtBQUNPLE1BQU1FLG1DQUFtQ1YsK0NBQVNBO0lBQ3JERSxhQUFjO1FBQ1YsS0FBSyxDQUFDO1FBQ05DLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUTtZQUNoQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO0lBQ0o7QUFDSjtBQUNPLE1BQU1HLCtCQUErQlgsK0NBQVNBO0lBQ2pERSxhQUFjO1FBQ1YsS0FBSyxDQUFDO1FBQ05DLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUTtZQUNoQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO0lBQ0o7QUFDSjtBQUNPLE1BQU1JLHNDQUFzQ1osK0NBQVNBO0lBQ3hERSxZQUFZLEVBQUVXLE9BQU8sRUFBRUMsU0FBUyxFQUFHLENBQUU7UUFDakMsS0FBSyxDQUFDLENBQUMsU0FBUyxFQUFFRCxRQUFRLDJCQUEyQixFQUFFQyxVQUFVQyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ3pFWixPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVE7WUFDaENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87UUFDWDtJQUNKO0FBQ0o7QUFDTyxNQUFNUSxvQ0FBb0NoQiwrQ0FBU0E7SUFDdERFLFlBQVksRUFBRWUsaUJBQWlCLEVBQUVDLGdCQUFnQixFQUFHLENBQUU7UUFDbEQsS0FBSyxDQUFDLENBQUMsd0NBQXdDLEVBQUVBLGlCQUFpQiw2Q0FBNkMsRUFBRUQsa0JBQWtCLEVBQUUsQ0FBQyxFQUFFO1lBQ3BJRSxjQUFjO2dCQUNWLENBQUMsbUJBQW1CLEVBQUVELGlCQUFpQixDQUFDO2dCQUN4QyxDQUFDLG1CQUFtQixFQUFFRCxrQkFBa0IsQ0FBQzthQUM1QztRQUNMO1FBQ0FkLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUTtZQUNoQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO0lBQ0o7QUFDSjtBQUNPLE1BQU1ZLDhDQUE4Q3BCLCtDQUFTQTtJQUNoRUUsWUFBWSxFQUFFWSxTQUFTLEVBQUUsQ0FBRTtRQUN2QixLQUFLLENBQUMsQ0FBQyxXQUFXLEVBQUVBLFVBQVVDLElBQUksQ0FBQyxpQ0FBaUMsQ0FBQyxFQUFFO1lBQ25FTSxTQUFTO2dCQUNMO2dCQUNBO2dCQUNBO2FBQ0gsQ0FBQ0MsSUFBSSxDQUFDO1FBQ1g7UUFDQW5CLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUTtZQUNoQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO0lBQ0o7QUFDSixFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NwYWNlLWp1bXAtZ2FtZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ad2FnbWkrY29yZUAyLjE5LjBfQHRhbnN0YWNrK3F1ZXJ5LWNvcmVANS44NS4zX0B0eXBlcytyZWFjdEAxOC4yLjM3X3JlYWN0QDE4LjIuMF90eXBlc2NfNDBjNmI5N2FmMTkzZTM0ZGIzZDRjMDE5MzMxNDQzODMvbm9kZV9tb2R1bGVzL0B3YWdtaS9jb3JlL2Rpc3QvZXNtL2Vycm9ycy9jb25maWcuanM/OWE4YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlRXJyb3IgfSBmcm9tICcuL2Jhc2UuanMnO1xuZXhwb3J0IGNsYXNzIENoYWluTm90Q29uZmlndXJlZEVycm9yIGV4dGVuZHMgQmFzZUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ0NoYWluIG5vdCBjb25maWd1cmVkLicpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAnQ2hhaW5Ob3RDb25maWd1cmVkRXJyb3InXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBDb25uZWN0b3JBbHJlYWR5Q29ubmVjdGVkRXJyb3IgZXh0ZW5kcyBCYXNlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignQ29ubmVjdG9yIGFscmVhZHkgY29ubmVjdGVkLicpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAnQ29ubmVjdG9yQWxyZWFkeUNvbm5lY3RlZEVycm9yJ1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQ29ubmVjdG9yTm90Q29ubmVjdGVkRXJyb3IgZXh0ZW5kcyBCYXNlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignQ29ubmVjdG9yIG5vdCBjb25uZWN0ZWQuJyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5hbWVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6ICdDb25uZWN0b3JOb3RDb25uZWN0ZWRFcnJvcidcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIENvbm5lY3Rvck5vdEZvdW5kRXJyb3IgZXh0ZW5kcyBCYXNlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignQ29ubmVjdG9yIG5vdCBmb3VuZC4nKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogJ0Nvbm5lY3Rvck5vdEZvdW5kRXJyb3InXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBDb25uZWN0b3JBY2NvdW50Tm90Rm91bmRFcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoeyBhZGRyZXNzLCBjb25uZWN0b3IsIH0pIHtcbiAgICAgICAgc3VwZXIoYEFjY291bnQgXCIke2FkZHJlc3N9XCIgbm90IGZvdW5kIGZvciBjb25uZWN0b3IgXCIke2Nvbm5lY3Rvci5uYW1lfVwiLmApO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAnQ29ubmVjdG9yQWNjb3VudE5vdEZvdW5kRXJyb3InXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBDb25uZWN0b3JDaGFpbk1pc21hdGNoRXJyb3IgZXh0ZW5kcyBCYXNlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHsgY29ubmVjdGlvbkNoYWluSWQsIGNvbm5lY3RvckNoYWluSWQsIH0pIHtcbiAgICAgICAgc3VwZXIoYFRoZSBjdXJyZW50IGNoYWluIG9mIHRoZSBjb25uZWN0b3IgKGlkOiAke2Nvbm5lY3RvckNoYWluSWR9KSBkb2VzIG5vdCBtYXRjaCB0aGUgY29ubmVjdGlvbidzIGNoYWluIChpZDogJHtjb25uZWN0aW9uQ2hhaW5JZH0pLmAsIHtcbiAgICAgICAgICAgIG1ldGFNZXNzYWdlczogW1xuICAgICAgICAgICAgICAgIGBDdXJyZW50IENoYWluIElEOiAgJHtjb25uZWN0b3JDaGFpbklkfWAsXG4gICAgICAgICAgICAgICAgYEV4cGVjdGVkIENoYWluIElEOiAke2Nvbm5lY3Rpb25DaGFpbklkfWAsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogJ0Nvbm5lY3RvckNoYWluTWlzbWF0Y2hFcnJvcidcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIENvbm5lY3RvclVuYXZhaWxhYmxlUmVjb25uZWN0aW5nRXJyb3IgZXh0ZW5kcyBCYXNlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHsgY29ubmVjdG9yIH0pIHtcbiAgICAgICAgc3VwZXIoYENvbm5lY3RvciBcIiR7Y29ubmVjdG9yLm5hbWV9XCIgdW5hdmFpbGFibGUgd2hpbGUgcmVjb25uZWN0aW5nLmAsIHtcbiAgICAgICAgICAgIGRldGFpbHM6IFtcbiAgICAgICAgICAgICAgICAnRHVyaW5nIHRoZSByZWNvbm5lY3Rpb24gc3RlcCwgdGhlIG9ubHkgY29ubmVjdG9yIG1ldGhvZHMgZ3VhcmFudGVlZCB0byBiZSBhdmFpbGFibGUgYXJlOiBgaWRgLCBgbmFtZWAsIGB0eXBlYCwgYHVpZGAuJyxcbiAgICAgICAgICAgICAgICAnQWxsIG90aGVyIG1ldGhvZHMgYXJlIG5vdCBndWFyYW50ZWVkIHRvIGJlIGF2YWlsYWJsZSB1bnRpbCByZWNvbm5lY3Rpb24gY29tcGxldGVzIGFuZCBjb25uZWN0b3JzIGFyZSBmdWxseSByZXN0b3JlZC4nLFxuICAgICAgICAgICAgICAgICdUaGlzIGVycm9yIGNvbW1vbmx5IG9jY3VycyBmb3IgY29ubmVjdG9ycyB0aGF0IGFzeW5jaHJvbm91c2x5IGluamVjdCBhZnRlciByZWNvbm5lY3Rpb24gaGFzIGFscmVhZHkgc3RhcnRlZC4nLFxuICAgICAgICAgICAgXS5qb2luKCcgJyksXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAnQ29ubmVjdG9yVW5hdmFpbGFibGVSZWNvbm5lY3RpbmdFcnJvcidcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uZmlnLmpzLm1hcCJdLCJuYW1lcyI6WyJCYXNlRXJyb3IiLCJDaGFpbk5vdENvbmZpZ3VyZWRFcnJvciIsImNvbnN0cnVjdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsIkNvbm5lY3RvckFscmVhZHlDb25uZWN0ZWRFcnJvciIsIkNvbm5lY3Rvck5vdENvbm5lY3RlZEVycm9yIiwiQ29ubmVjdG9yTm90Rm91bmRFcnJvciIsIkNvbm5lY3RvckFjY291bnROb3RGb3VuZEVycm9yIiwiYWRkcmVzcyIsImNvbm5lY3RvciIsIm5hbWUiLCJDb25uZWN0b3JDaGFpbk1pc21hdGNoRXJyb3IiLCJjb25uZWN0aW9uQ2hhaW5JZCIsImNvbm5lY3RvckNoYWluSWQiLCJtZXRhTWVzc2FnZXMiLCJDb25uZWN0b3JVbmF2YWlsYWJsZVJlY29ubmVjdGluZ0Vycm9yIiwiZGV0YWlscyIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/errors/config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/errors/connector.js":
/*!***********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/errors/connector.js ***!
  \***********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProviderNotFoundError: () => (/* binding */ ProviderNotFoundError),\n/* harmony export */   SwitchChainNotSupportedError: () => (/* binding */ SwitchChainNotSupportedError)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/errors/base.js\");\n\nclass ProviderNotFoundError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor(){\n        super(\"Provider not found.\");\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"ProviderNotFoundError\"\n        });\n    }\n}\nclass SwitchChainNotSupportedError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ connector }){\n        super(`\"${connector.name}\" does not support programmatic chain switching.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"SwitchChainNotSupportedError\"\n        });\n    }\n} //# sourceMappingURL=connector.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdhZ21pK2NvcmVAMi4xOS4wX0B0YW5zdGFjaytxdWVyeS1jb3JlQDUuODUuM19AdHlwZXMrcmVhY3RAMTguMi4zN19yZWFjdEAxOC4yLjBfdHlwZXNjXzQwYzZiOTdhZjE5M2UzNGRiM2Q0YzAxOTMzMTQ0MzgzL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29yZS9kaXN0L2VzbS9lcnJvcnMvY29ubmVjdG9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFzQztBQUMvQixNQUFNQyw4QkFBOEJELCtDQUFTQTtJQUNoREUsYUFBYztRQUNWLEtBQUssQ0FBQztRQUNOQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVE7WUFDaENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87UUFDWDtJQUNKO0FBQ0o7QUFDTyxNQUFNQyxxQ0FBcUNULCtDQUFTQTtJQUN2REUsWUFBWSxFQUFFUSxTQUFTLEVBQUUsQ0FBRTtRQUN2QixLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUVBLFVBQVVDLElBQUksQ0FBQyxnREFBZ0QsQ0FBQztRQUMxRVIsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxRQUFRO1lBQ2hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO1FBQ1g7SUFDSjtBQUNKLEVBQ0EscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3BhY2UtanVtcC1nYW1lLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B3YWdtaStjb3JlQDIuMTkuMF9AdGFuc3RhY2srcXVlcnktY29yZUA1Ljg1LjNfQHR5cGVzK3JlYWN0QDE4LjIuMzdfcmVhY3RAMTguMi4wX3R5cGVzY180MGM2Yjk3YWYxOTNlMzRkYjNkNGMwMTkzMzE0NDM4My9ub2RlX21vZHVsZXMvQHdhZ21pL2NvcmUvZGlzdC9lc20vZXJyb3JzL2Nvbm5lY3Rvci5qcz81Mjc5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VFcnJvciB9IGZyb20gJy4vYmFzZS5qcyc7XG5leHBvcnQgY2xhc3MgUHJvdmlkZXJOb3RGb3VuZEVycm9yIGV4dGVuZHMgQmFzZUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ1Byb3ZpZGVyIG5vdCBmb3VuZC4nKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogJ1Byb3ZpZGVyTm90Rm91bmRFcnJvcidcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFN3aXRjaENoYWluTm90U3VwcG9ydGVkRXJyb3IgZXh0ZW5kcyBCYXNlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHsgY29ubmVjdG9yIH0pIHtcbiAgICAgICAgc3VwZXIoYFwiJHtjb25uZWN0b3IubmFtZX1cIiBkb2VzIG5vdCBzdXBwb3J0IHByb2dyYW1tYXRpYyBjaGFpbiBzd2l0Y2hpbmcuYCk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5hbWVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6ICdTd2l0Y2hDaGFpbk5vdFN1cHBvcnRlZEVycm9yJ1xuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25uZWN0b3IuanMubWFwIl0sIm5hbWVzIjpbIkJhc2VFcnJvciIsIlByb3ZpZGVyTm90Rm91bmRFcnJvciIsImNvbnN0cnVjdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsIlN3aXRjaENoYWluTm90U3VwcG9ydGVkRXJyb3IiLCJjb25uZWN0b3IiLCJuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/errors/connector.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/hydrate.js":
/*!**************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/hydrate.js ***!
  \**************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hydrate: () => (/* binding */ hydrate)\n/* harmony export */ });\n/* harmony import */ var _actions_reconnect_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./actions/reconnect.js */ \"(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/actions/reconnect.js\");\n\nfunction hydrate(config, parameters) {\n    const { initialState, reconnectOnMount } = parameters;\n    if (initialState && !config._internal.store.persist.hasHydrated()) config.setState({\n        ...initialState,\n        chainId: config.chains.some((x)=>x.id === initialState.chainId) ? initialState.chainId : config.chains[0].id,\n        connections: reconnectOnMount ? initialState.connections : new Map(),\n        status: reconnectOnMount ? \"reconnecting\" : \"disconnected\"\n    });\n    return {\n        async onMount () {\n            if (config._internal.ssr) {\n                await config._internal.store.persist.rehydrate();\n                if (config._internal.mipd) {\n                    config._internal.connectors.setState((connectors)=>{\n                        const rdnsSet = new Set();\n                        for (const connector of connectors ?? []){\n                            if (connector.rdns) {\n                                const rdnsValues = Array.isArray(connector.rdns) ? connector.rdns : [\n                                    connector.rdns\n                                ];\n                                for (const rdns of rdnsValues){\n                                    rdnsSet.add(rdns);\n                                }\n                            }\n                        }\n                        const mipdConnectors = [];\n                        const providers = config._internal.mipd?.getProviders() ?? [];\n                        for (const provider of providers){\n                            if (rdnsSet.has(provider.info.rdns)) continue;\n                            const connectorFn = config._internal.connectors.providerDetailToConnector(provider);\n                            const connector = config._internal.connectors.setup(connectorFn);\n                            mipdConnectors.push(connector);\n                        }\n                        return [\n                            ...connectors,\n                            ...mipdConnectors\n                        ];\n                    });\n                }\n            }\n            if (reconnectOnMount) (0,_actions_reconnect_js__WEBPACK_IMPORTED_MODULE_0__.reconnect)(config);\n            else if (config.storage) // Reset connections that may have been hydrated from storage.\n            config.setState((x)=>({\n                    ...x,\n                    connections: new Map()\n                }));\n        }\n    };\n} //# sourceMappingURL=hydrate.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdhZ21pK2NvcmVAMi4xOS4wX0B0YW5zdGFjaytxdWVyeS1jb3JlQDUuODUuM19AdHlwZXMrcmVhY3RAMTguMi4zN19yZWFjdEAxOC4yLjBfdHlwZXNjXzQwYzZiOTdhZjE5M2UzNGRiM2Q0YzAxOTMzMTQ0MzgzL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29yZS9kaXN0L2VzbS9oeWRyYXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW1EO0FBQzVDLFNBQVNDLFFBQVFDLE1BQU0sRUFBRUMsVUFBVTtJQUN0QyxNQUFNLEVBQUVDLFlBQVksRUFBRUMsZ0JBQWdCLEVBQUUsR0FBR0Y7SUFDM0MsSUFBSUMsZ0JBQWdCLENBQUNGLE9BQU9JLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDQyxPQUFPLENBQUNDLFdBQVcsSUFDM0RQLE9BQU9RLFFBQVEsQ0FBQztRQUNaLEdBQUdOLFlBQVk7UUFDZk8sU0FBU1QsT0FBT1UsTUFBTSxDQUFDQyxJQUFJLENBQUMsQ0FBQ0MsSUFBTUEsRUFBRUMsRUFBRSxLQUFLWCxhQUFhTyxPQUFPLElBQzFEUCxhQUFhTyxPQUFPLEdBQ3BCVCxPQUFPVSxNQUFNLENBQUMsRUFBRSxDQUFDRyxFQUFFO1FBQ3pCQyxhQUFhWCxtQkFBbUJELGFBQWFZLFdBQVcsR0FBRyxJQUFJQztRQUMvREMsUUFBUWIsbUJBQW1CLGlCQUFpQjtJQUNoRDtJQUNKLE9BQU87UUFDSCxNQUFNYztZQUNGLElBQUlqQixPQUFPSSxTQUFTLENBQUNjLEdBQUcsRUFBRTtnQkFDdEIsTUFBTWxCLE9BQU9JLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDQyxPQUFPLENBQUNhLFNBQVM7Z0JBQzlDLElBQUluQixPQUFPSSxTQUFTLENBQUNnQixJQUFJLEVBQUU7b0JBQ3ZCcEIsT0FBT0ksU0FBUyxDQUFDaUIsVUFBVSxDQUFDYixRQUFRLENBQUMsQ0FBQ2E7d0JBQ2xDLE1BQU1DLFVBQVUsSUFBSUM7d0JBQ3BCLEtBQUssTUFBTUMsYUFBYUgsY0FBYyxFQUFFLENBQUU7NEJBQ3RDLElBQUlHLFVBQVVDLElBQUksRUFBRTtnQ0FDaEIsTUFBTUMsYUFBYUMsTUFBTUMsT0FBTyxDQUFDSixVQUFVQyxJQUFJLElBQ3pDRCxVQUFVQyxJQUFJLEdBQ2Q7b0NBQUNELFVBQVVDLElBQUk7aUNBQUM7Z0NBQ3RCLEtBQUssTUFBTUEsUUFBUUMsV0FBWTtvQ0FDM0JKLFFBQVFPLEdBQUcsQ0FBQ0o7Z0NBQ2hCOzRCQUNKO3dCQUNKO3dCQUNBLE1BQU1LLGlCQUFpQixFQUFFO3dCQUN6QixNQUFNQyxZQUFZL0IsT0FBT0ksU0FBUyxDQUFDZ0IsSUFBSSxFQUFFWSxrQkFBa0IsRUFBRTt3QkFDN0QsS0FBSyxNQUFNQyxZQUFZRixVQUFXOzRCQUM5QixJQUFJVCxRQUFRWSxHQUFHLENBQUNELFNBQVNFLElBQUksQ0FBQ1YsSUFBSSxHQUM5Qjs0QkFDSixNQUFNVyxjQUFjcEMsT0FBT0ksU0FBUyxDQUFDaUIsVUFBVSxDQUFDZ0IseUJBQXlCLENBQUNKOzRCQUMxRSxNQUFNVCxZQUFZeEIsT0FBT0ksU0FBUyxDQUFDaUIsVUFBVSxDQUFDaUIsS0FBSyxDQUFDRjs0QkFDcEROLGVBQWVTLElBQUksQ0FBQ2Y7d0JBQ3hCO3dCQUNBLE9BQU87K0JBQUlIOytCQUFlUzt5QkFBZTtvQkFDN0M7Z0JBQ0o7WUFDSjtZQUNBLElBQUkzQixrQkFDQUwsZ0VBQVNBLENBQUNFO2lCQUNULElBQUlBLE9BQU93QyxPQUFPLEVBQ25CLDhEQUE4RDtZQUM5RHhDLE9BQU9RLFFBQVEsQ0FBQyxDQUFDSSxJQUFPO29CQUNwQixHQUFHQSxDQUFDO29CQUNKRSxhQUFhLElBQUlDO2dCQUNyQjtRQUNSO0lBQ0o7QUFDSixFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NwYWNlLWp1bXAtZ2FtZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ad2FnbWkrY29yZUAyLjE5LjBfQHRhbnN0YWNrK3F1ZXJ5LWNvcmVANS44NS4zX0B0eXBlcytyZWFjdEAxOC4yLjM3X3JlYWN0QDE4LjIuMF90eXBlc2NfNDBjNmI5N2FmMTkzZTM0ZGIzZDRjMDE5MzMxNDQzODMvbm9kZV9tb2R1bGVzL0B3YWdtaS9jb3JlL2Rpc3QvZXNtL2h5ZHJhdGUuanM/MWQ3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZWNvbm5lY3QgfSBmcm9tICcuL2FjdGlvbnMvcmVjb25uZWN0LmpzJztcbmV4cG9ydCBmdW5jdGlvbiBoeWRyYXRlKGNvbmZpZywgcGFyYW1ldGVycykge1xuICAgIGNvbnN0IHsgaW5pdGlhbFN0YXRlLCByZWNvbm5lY3RPbk1vdW50IH0gPSBwYXJhbWV0ZXJzO1xuICAgIGlmIChpbml0aWFsU3RhdGUgJiYgIWNvbmZpZy5faW50ZXJuYWwuc3RvcmUucGVyc2lzdC5oYXNIeWRyYXRlZCgpKVxuICAgICAgICBjb25maWcuc2V0U3RhdGUoe1xuICAgICAgICAgICAgLi4uaW5pdGlhbFN0YXRlLFxuICAgICAgICAgICAgY2hhaW5JZDogY29uZmlnLmNoYWlucy5zb21lKCh4KSA9PiB4LmlkID09PSBpbml0aWFsU3RhdGUuY2hhaW5JZClcbiAgICAgICAgICAgICAgICA/IGluaXRpYWxTdGF0ZS5jaGFpbklkXG4gICAgICAgICAgICAgICAgOiBjb25maWcuY2hhaW5zWzBdLmlkLFxuICAgICAgICAgICAgY29ubmVjdGlvbnM6IHJlY29ubmVjdE9uTW91bnQgPyBpbml0aWFsU3RhdGUuY29ubmVjdGlvbnMgOiBuZXcgTWFwKCksXG4gICAgICAgICAgICBzdGF0dXM6IHJlY29ubmVjdE9uTW91bnQgPyAncmVjb25uZWN0aW5nJyA6ICdkaXNjb25uZWN0ZWQnLFxuICAgICAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhc3luYyBvbk1vdW50KCkge1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5faW50ZXJuYWwuc3NyKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgY29uZmlnLl9pbnRlcm5hbC5zdG9yZS5wZXJzaXN0LnJlaHlkcmF0ZSgpO1xuICAgICAgICAgICAgICAgIGlmIChjb25maWcuX2ludGVybmFsLm1pcGQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9pbnRlcm5hbC5jb25uZWN0b3JzLnNldFN0YXRlKChjb25uZWN0b3JzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZG5zU2V0ID0gbmV3IFNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBjb25uZWN0b3Igb2YgY29ubmVjdG9ycyA/PyBbXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25uZWN0b3IucmRucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZG5zVmFsdWVzID0gQXJyYXkuaXNBcnJheShjb25uZWN0b3IucmRucylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gY29ubmVjdG9yLnJkbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogW2Nvbm5lY3Rvci5yZG5zXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCByZG5zIG9mIHJkbnNWYWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJkbnNTZXQuYWRkKHJkbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWlwZENvbm5lY3RvcnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVycyA9IGNvbmZpZy5faW50ZXJuYWwubWlwZD8uZ2V0UHJvdmlkZXJzKCkgPz8gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHByb3ZpZGVyIG9mIHByb3ZpZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZG5zU2V0Lmhhcyhwcm92aWRlci5pbmZvLnJkbnMpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb25uZWN0b3JGbiA9IGNvbmZpZy5faW50ZXJuYWwuY29ubmVjdG9ycy5wcm92aWRlckRldGFpbFRvQ29ubmVjdG9yKHByb3ZpZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb25uZWN0b3IgPSBjb25maWcuX2ludGVybmFsLmNvbm5lY3RvcnMuc2V0dXAoY29ubmVjdG9yRm4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pcGRDb25uZWN0b3JzLnB1c2goY29ubmVjdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbLi4uY29ubmVjdG9ycywgLi4ubWlwZENvbm5lY3RvcnNdO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVjb25uZWN0T25Nb3VudClcbiAgICAgICAgICAgICAgICByZWNvbm5lY3QoY29uZmlnKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbmZpZy5zdG9yYWdlKVxuICAgICAgICAgICAgICAgIC8vIFJlc2V0IGNvbm5lY3Rpb25zIHRoYXQgbWF5IGhhdmUgYmVlbiBoeWRyYXRlZCBmcm9tIHN0b3JhZ2UuXG4gICAgICAgICAgICAgICAgY29uZmlnLnNldFN0YXRlKCh4KSA9PiAoe1xuICAgICAgICAgICAgICAgICAgICAuLi54LFxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uczogbmV3IE1hcCgpLFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHlkcmF0ZS5qcy5tYXAiXSwibmFtZXMiOlsicmVjb25uZWN0IiwiaHlkcmF0ZSIsImNvbmZpZyIsInBhcmFtZXRlcnMiLCJpbml0aWFsU3RhdGUiLCJyZWNvbm5lY3RPbk1vdW50IiwiX2ludGVybmFsIiwic3RvcmUiLCJwZXJzaXN0IiwiaGFzSHlkcmF0ZWQiLCJzZXRTdGF0ZSIsImNoYWluSWQiLCJjaGFpbnMiLCJzb21lIiwieCIsImlkIiwiY29ubmVjdGlvbnMiLCJNYXAiLCJzdGF0dXMiLCJvbk1vdW50Iiwic3NyIiwicmVoeWRyYXRlIiwibWlwZCIsImNvbm5lY3RvcnMiLCJyZG5zU2V0IiwiU2V0IiwiY29ubmVjdG9yIiwicmRucyIsInJkbnNWYWx1ZXMiLCJBcnJheSIsImlzQXJyYXkiLCJhZGQiLCJtaXBkQ29ubmVjdG9ycyIsInByb3ZpZGVycyIsImdldFByb3ZpZGVycyIsInByb3ZpZGVyIiwiaGFzIiwiaW5mbyIsImNvbm5lY3RvckZuIiwicHJvdmlkZXJEZXRhaWxUb0Nvbm5lY3RvciIsInNldHVwIiwicHVzaCIsInN0b3JhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/hydrate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/utils/deserialize.js":
/*!************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/utils/deserialize.js ***!
  \************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deserialize: () => (/* binding */ deserialize)\n/* harmony export */ });\nfunction deserialize(value, reviver) {\n    return JSON.parse(value, (key, value_)=>{\n        let value = value_;\n        if (value?.__type === \"bigint\") value = BigInt(value.value);\n        if (value?.__type === \"Map\") value = new Map(value.value);\n        return reviver?.(key, value) ?? value;\n    });\n} //# sourceMappingURL=deserialize.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdhZ21pK2NvcmVAMi4xOS4wX0B0YW5zdGFjaytxdWVyeS1jb3JlQDUuODUuM19AdHlwZXMrcmVhY3RAMTguMi4zN19yZWFjdEAxOC4yLjBfdHlwZXNjXzQwYzZiOTdhZjE5M2UzNGRiM2Q0YzAxOTMzMTQ0MzgzL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29yZS9kaXN0L2VzbS91dGlscy9kZXNlcmlhbGl6ZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsWUFBWUMsS0FBSyxFQUFFQyxPQUFPO0lBQ3RDLE9BQU9DLEtBQUtDLEtBQUssQ0FBQ0gsT0FBTyxDQUFDSSxLQUFLQztRQUMzQixJQUFJTCxRQUFRSztRQUNaLElBQUlMLE9BQU9NLFdBQVcsVUFDbEJOLFFBQVFPLE9BQU9QLE1BQU1BLEtBQUs7UUFDOUIsSUFBSUEsT0FBT00sV0FBVyxPQUNsQk4sUUFBUSxJQUFJUSxJQUFJUixNQUFNQSxLQUFLO1FBQy9CLE9BQU9DLFVBQVVHLEtBQUtKLFVBQVVBO0lBQ3BDO0FBQ0osRUFDQSx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcGFjZS1qdW1wLWdhbWUvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdhZ21pK2NvcmVAMi4xOS4wX0B0YW5zdGFjaytxdWVyeS1jb3JlQDUuODUuM19AdHlwZXMrcmVhY3RAMTguMi4zN19yZWFjdEAxOC4yLjBfdHlwZXNjXzQwYzZiOTdhZjE5M2UzNGRiM2Q0YzAxOTMzMTQ0MzgzL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29yZS9kaXN0L2VzbS91dGlscy9kZXNlcmlhbGl6ZS5qcz84MjRmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBkZXNlcmlhbGl6ZSh2YWx1ZSwgcmV2aXZlcikge1xuICAgIHJldHVybiBKU09OLnBhcnNlKHZhbHVlLCAoa2V5LCB2YWx1ZV8pID0+IHtcbiAgICAgICAgbGV0IHZhbHVlID0gdmFsdWVfO1xuICAgICAgICBpZiAodmFsdWU/Ll9fdHlwZSA9PT0gJ2JpZ2ludCcpXG4gICAgICAgICAgICB2YWx1ZSA9IEJpZ0ludCh2YWx1ZS52YWx1ZSk7XG4gICAgICAgIGlmICh2YWx1ZT8uX190eXBlID09PSAnTWFwJylcbiAgICAgICAgICAgIHZhbHVlID0gbmV3IE1hcCh2YWx1ZS52YWx1ZSk7XG4gICAgICAgIHJldHVybiByZXZpdmVyPy4oa2V5LCB2YWx1ZSkgPz8gdmFsdWU7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZXNlcmlhbGl6ZS5qcy5tYXAiXSwibmFtZXMiOlsiZGVzZXJpYWxpemUiLCJ2YWx1ZSIsInJldml2ZXIiLCJKU09OIiwicGFyc2UiLCJrZXkiLCJ2YWx1ZV8iLCJfX3R5cGUiLCJCaWdJbnQiLCJNYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/utils/deserialize.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/utils/getVersion.js":
/*!***********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/utils/getVersion.js ***!
  \***********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getVersion: () => (/* binding */ getVersion)\n/* harmony export */ });\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../version.js */ \"(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/version.js\");\n\nconst getVersion = ()=>`@wagmi/core@${_version_js__WEBPACK_IMPORTED_MODULE_0__.version}`; //# sourceMappingURL=getVersion.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdhZ21pK2NvcmVAMi4xOS4wX0B0YW5zdGFjaytxdWVyeS1jb3JlQDUuODUuM19AdHlwZXMrcmVhY3RAMTguMi4zN19yZWFjdEAxOC4yLjBfdHlwZXNjXzQwYzZiOTdhZjE5M2UzNGRiM2Q0YzAxOTMzMTQ0MzgzL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29yZS9kaXN0L2VzbS91dGlscy9nZXRWZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXdDO0FBQ2pDLE1BQU1DLGFBQWEsSUFBTSxDQUFDLFlBQVksRUFBRUQsZ0RBQU9BLENBQUMsQ0FBQyxDQUFDLENBQ3pELHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NwYWNlLWp1bXAtZ2FtZS8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ad2FnbWkrY29yZUAyLjE5LjBfQHRhbnN0YWNrK3F1ZXJ5LWNvcmVANS44NS4zX0B0eXBlcytyZWFjdEAxOC4yLjM3X3JlYWN0QDE4LjIuMF90eXBlc2NfNDBjNmI5N2FmMTkzZTM0ZGIzZDRjMDE5MzMxNDQzODMvbm9kZV9tb2R1bGVzL0B3YWdtaS9jb3JlL2Rpc3QvZXNtL3V0aWxzL2dldFZlcnNpb24uanM/OGQ5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSAnLi4vdmVyc2lvbi5qcyc7XG5leHBvcnQgY29uc3QgZ2V0VmVyc2lvbiA9ICgpID0+IGBAd2FnbWkvY29yZUAke3ZlcnNpb259YDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldFZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbInZlcnNpb24iLCJnZXRWZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/utils/getVersion.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/utils/serialize.js":
/*!**********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/utils/serialize.js ***!
  \**********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   serialize: () => (/* binding */ serialize)\n/* harmony export */ });\n/**\n * Get the reference key for the circular value\n *\n * @param keys the keys to build the reference key from\n * @param cutoff the maximum number of keys to include\n * @returns the reference key\n */ function getReferenceKey(keys, cutoff) {\n    return keys.slice(0, cutoff).join(\".\") || \".\";\n}\n/**\n * Faster `Array.prototype.indexOf` implementation build for slicing / splicing\n *\n * @param array the array to match the value in\n * @param value the value to match\n * @returns the matching index, or -1\n */ function getCutoff(array, value) {\n    const { length } = array;\n    for(let index = 0; index < length; ++index){\n        if (array[index] === value) {\n            return index + 1;\n        }\n    }\n    return 0;\n}\n/**\n * Create a replacer method that handles circular values\n *\n * @param [replacer] a custom replacer to use for non-circular values\n * @param [circularReplacer] a custom replacer to use for circular methods\n * @returns the value to stringify\n */ function createReplacer(replacer, circularReplacer) {\n    const hasReplacer = typeof replacer === \"function\";\n    const hasCircularReplacer = typeof circularReplacer === \"function\";\n    const cache = [];\n    const keys = [];\n    return function replace(key, value) {\n        if (typeof value === \"object\") {\n            if (cache.length) {\n                const thisCutoff = getCutoff(cache, this);\n                if (thisCutoff === 0) {\n                    cache[cache.length] = this;\n                } else {\n                    cache.splice(thisCutoff);\n                    keys.splice(thisCutoff);\n                }\n                keys[keys.length] = key;\n                const valueCutoff = getCutoff(cache, value);\n                if (valueCutoff !== 0) {\n                    return hasCircularReplacer ? circularReplacer.call(this, key, value, getReferenceKey(keys, valueCutoff)) : `[ref=${getReferenceKey(keys, valueCutoff)}]`;\n                }\n            } else {\n                cache[0] = value;\n                keys[0] = key;\n            }\n        }\n        return hasReplacer ? replacer.call(this, key, value) : value;\n    };\n}\n/**\n * Stringifier that handles circular values\n *\n * Forked from https://github.com/planttheidea/fast-stringify\n *\n * @param value to stringify\n * @param [replacer] a custom replacer function for handling standard values\n * @param [indent] the number of spaces to indent the output by\n * @param [circularReplacer] a custom replacer function for handling circular values\n * @returns the stringified output\n */ function serialize(value, replacer, indent, circularReplacer) {\n    return JSON.stringify(value, createReplacer((key, value_)=>{\n        let value = value_;\n        if (typeof value === \"bigint\") value = {\n            __type: \"bigint\",\n            value: value_.toString()\n        };\n        if (value instanceof Map) value = {\n            __type: \"Map\",\n            value: Array.from(value_.entries())\n        };\n        return replacer?.(key, value) ?? value;\n    }, circularReplacer), indent ?? undefined);\n} //# sourceMappingURL=serialize.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdhZ21pK2NvcmVAMi4xOS4wX0B0YW5zdGFjaytxdWVyeS1jb3JlQDUuODUuM19AdHlwZXMrcmVhY3RAMTguMi4zN19yZWFjdEAxOC4yLjBfdHlwZXNjXzQwYzZiOTdhZjE5M2UzNGRiM2Q0YzAxOTMzMTQ0MzgzL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29yZS9kaXN0L2VzbS91dGlscy9zZXJpYWxpemUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7Q0FNQyxHQUNELFNBQVNBLGdCQUFnQkMsSUFBSSxFQUFFQyxNQUFNO0lBQ2pDLE9BQU9ELEtBQUtFLEtBQUssQ0FBQyxHQUFHRCxRQUFRRSxJQUFJLENBQUMsUUFBUTtBQUM5QztBQUNBOzs7Ozs7Q0FNQyxHQUNELFNBQVNDLFVBQVVDLEtBQUssRUFBRUMsS0FBSztJQUMzQixNQUFNLEVBQUVDLE1BQU0sRUFBRSxHQUFHRjtJQUNuQixJQUFLLElBQUlHLFFBQVEsR0FBR0EsUUFBUUQsUUFBUSxFQUFFQyxNQUFPO1FBQ3pDLElBQUlILEtBQUssQ0FBQ0csTUFBTSxLQUFLRixPQUFPO1lBQ3hCLE9BQU9FLFFBQVE7UUFDbkI7SUFDSjtJQUNBLE9BQU87QUFDWDtBQUNBOzs7Ozs7Q0FNQyxHQUNELFNBQVNDLGVBQWVDLFFBQVEsRUFBRUMsZ0JBQWdCO0lBQzlDLE1BQU1DLGNBQWMsT0FBT0YsYUFBYTtJQUN4QyxNQUFNRyxzQkFBc0IsT0FBT0YscUJBQXFCO0lBQ3hELE1BQU1HLFFBQVEsRUFBRTtJQUNoQixNQUFNZCxPQUFPLEVBQUU7SUFDZixPQUFPLFNBQVNlLFFBQVFDLEdBQUcsRUFBRVYsS0FBSztRQUM5QixJQUFJLE9BQU9BLFVBQVUsVUFBVTtZQUMzQixJQUFJUSxNQUFNUCxNQUFNLEVBQUU7Z0JBQ2QsTUFBTVUsYUFBYWIsVUFBVVUsT0FBTyxJQUFJO2dCQUN4QyxJQUFJRyxlQUFlLEdBQUc7b0JBQ2xCSCxLQUFLLENBQUNBLE1BQU1QLE1BQU0sQ0FBQyxHQUFHLElBQUk7Z0JBQzlCLE9BQ0s7b0JBQ0RPLE1BQU1JLE1BQU0sQ0FBQ0Q7b0JBQ2JqQixLQUFLa0IsTUFBTSxDQUFDRDtnQkFDaEI7Z0JBQ0FqQixJQUFJLENBQUNBLEtBQUtPLE1BQU0sQ0FBQyxHQUFHUztnQkFDcEIsTUFBTUcsY0FBY2YsVUFBVVUsT0FBT1I7Z0JBQ3JDLElBQUlhLGdCQUFnQixHQUFHO29CQUNuQixPQUFPTixzQkFDREYsaUJBQWlCUyxJQUFJLENBQUMsSUFBSSxFQUFFSixLQUFLVixPQUFPUCxnQkFBZ0JDLE1BQU1tQixnQkFDOUQsQ0FBQyxLQUFLLEVBQUVwQixnQkFBZ0JDLE1BQU1tQixhQUFhLENBQUMsQ0FBQztnQkFDdkQ7WUFDSixPQUNLO2dCQUNETCxLQUFLLENBQUMsRUFBRSxHQUFHUjtnQkFDWE4sSUFBSSxDQUFDLEVBQUUsR0FBR2dCO1lBQ2Q7UUFDSjtRQUNBLE9BQU9KLGNBQWNGLFNBQVNVLElBQUksQ0FBQyxJQUFJLEVBQUVKLEtBQUtWLFNBQVNBO0lBQzNEO0FBQ0o7QUFDQTs7Ozs7Ozs7OztDQVVDLEdBQ00sU0FBU2UsVUFBVWYsS0FBSyxFQUFFSSxRQUFRLEVBQUVZLE1BQU0sRUFBRVgsZ0JBQWdCO0lBQy9ELE9BQU9ZLEtBQUtDLFNBQVMsQ0FBQ2xCLE9BQU9HLGVBQWUsQ0FBQ08sS0FBS1M7UUFDOUMsSUFBSW5CLFFBQVFtQjtRQUNaLElBQUksT0FBT25CLFVBQVUsVUFDakJBLFFBQVE7WUFBRW9CLFFBQVE7WUFBVXBCLE9BQU9tQixPQUFPRSxRQUFRO1FBQUc7UUFDekQsSUFBSXJCLGlCQUFpQnNCLEtBQ2pCdEIsUUFBUTtZQUFFb0IsUUFBUTtZQUFPcEIsT0FBT3VCLE1BQU1DLElBQUksQ0FBQ0wsT0FBT00sT0FBTztRQUFJO1FBQ2pFLE9BQU9yQixXQUFXTSxLQUFLVixVQUFVQTtJQUNyQyxHQUFHSyxtQkFBbUJXLFVBQVVVO0FBQ3BDLEVBQ0EscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3BhY2UtanVtcC1nYW1lLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B3YWdtaStjb3JlQDIuMTkuMF9AdGFuc3RhY2srcXVlcnktY29yZUA1Ljg1LjNfQHR5cGVzK3JlYWN0QDE4LjIuMzdfcmVhY3RAMTguMi4wX3R5cGVzY180MGM2Yjk3YWYxOTNlMzRkYjNkNGMwMTkzMzE0NDM4My9ub2RlX21vZHVsZXMvQHdhZ21pL2NvcmUvZGlzdC9lc20vdXRpbHMvc2VyaWFsaXplLmpzP2Y0ZTgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHZXQgdGhlIHJlZmVyZW5jZSBrZXkgZm9yIHRoZSBjaXJjdWxhciB2YWx1ZVxuICpcbiAqIEBwYXJhbSBrZXlzIHRoZSBrZXlzIHRvIGJ1aWxkIHRoZSByZWZlcmVuY2Uga2V5IGZyb21cbiAqIEBwYXJhbSBjdXRvZmYgdGhlIG1heGltdW0gbnVtYmVyIG9mIGtleXMgdG8gaW5jbHVkZVxuICogQHJldHVybnMgdGhlIHJlZmVyZW5jZSBrZXlcbiAqL1xuZnVuY3Rpb24gZ2V0UmVmZXJlbmNlS2V5KGtleXMsIGN1dG9mZikge1xuICAgIHJldHVybiBrZXlzLnNsaWNlKDAsIGN1dG9mZikuam9pbignLicpIHx8ICcuJztcbn1cbi8qKlxuICogRmFzdGVyIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgaW1wbGVtZW50YXRpb24gYnVpbGQgZm9yIHNsaWNpbmcgLyBzcGxpY2luZ1xuICpcbiAqIEBwYXJhbSBhcnJheSB0aGUgYXJyYXkgdG8gbWF0Y2ggdGhlIHZhbHVlIGluXG4gKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlIHRvIG1hdGNoXG4gKiBAcmV0dXJucyB0aGUgbWF0Y2hpbmcgaW5kZXgsIG9yIC0xXG4gKi9cbmZ1bmN0aW9uIGdldEN1dG9mZihhcnJheSwgdmFsdWUpIHtcbiAgICBjb25zdCB7IGxlbmd0aCB9ID0gYXJyYXk7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgKytpbmRleCkge1xuICAgICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGluZGV4ICsgMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gMDtcbn1cbi8qKlxuICogQ3JlYXRlIGEgcmVwbGFjZXIgbWV0aG9kIHRoYXQgaGFuZGxlcyBjaXJjdWxhciB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0gW3JlcGxhY2VyXSBhIGN1c3RvbSByZXBsYWNlciB0byB1c2UgZm9yIG5vbi1jaXJjdWxhciB2YWx1ZXNcbiAqIEBwYXJhbSBbY2lyY3VsYXJSZXBsYWNlcl0gYSBjdXN0b20gcmVwbGFjZXIgdG8gdXNlIGZvciBjaXJjdWxhciBtZXRob2RzXG4gKiBAcmV0dXJucyB0aGUgdmFsdWUgdG8gc3RyaW5naWZ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJlcGxhY2VyKHJlcGxhY2VyLCBjaXJjdWxhclJlcGxhY2VyKSB7XG4gICAgY29uc3QgaGFzUmVwbGFjZXIgPSB0eXBlb2YgcmVwbGFjZXIgPT09ICdmdW5jdGlvbic7XG4gICAgY29uc3QgaGFzQ2lyY3VsYXJSZXBsYWNlciA9IHR5cGVvZiBjaXJjdWxhclJlcGxhY2VyID09PSAnZnVuY3Rpb24nO1xuICAgIGNvbnN0IGNhY2hlID0gW107XG4gICAgY29uc3Qga2V5cyA9IFtdO1xuICAgIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGlmIChjYWNoZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0aGlzQ3V0b2ZmID0gZ2V0Q3V0b2ZmKGNhY2hlLCB0aGlzKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpc0N1dG9mZiA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjYWNoZVtjYWNoZS5sZW5ndGhdID0gdGhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNhY2hlLnNwbGljZSh0aGlzQ3V0b2ZmKTtcbiAgICAgICAgICAgICAgICAgICAga2V5cy5zcGxpY2UodGhpc0N1dG9mZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGtleXNba2V5cy5sZW5ndGhdID0ga2V5O1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlQ3V0b2ZmID0gZ2V0Q3V0b2ZmKGNhY2hlLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlQ3V0b2ZmICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBoYXNDaXJjdWxhclJlcGxhY2VyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGNpcmN1bGFyUmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlLCBnZXRSZWZlcmVuY2VLZXkoa2V5cywgdmFsdWVDdXRvZmYpKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBgW3JlZj0ke2dldFJlZmVyZW5jZUtleShrZXlzLCB2YWx1ZUN1dG9mZil9XWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FjaGVbMF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBrZXlzWzBdID0ga2V5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoYXNSZXBsYWNlciA/IHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSkgOiB2YWx1ZTtcbiAgICB9O1xufVxuLyoqXG4gKiBTdHJpbmdpZmllciB0aGF0IGhhbmRsZXMgY2lyY3VsYXIgdmFsdWVzXG4gKlxuICogRm9ya2VkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3BsYW50dGhlaWRlYS9mYXN0LXN0cmluZ2lmeVxuICpcbiAqIEBwYXJhbSB2YWx1ZSB0byBzdHJpbmdpZnlcbiAqIEBwYXJhbSBbcmVwbGFjZXJdIGEgY3VzdG9tIHJlcGxhY2VyIGZ1bmN0aW9uIGZvciBoYW5kbGluZyBzdGFuZGFyZCB2YWx1ZXNcbiAqIEBwYXJhbSBbaW5kZW50XSB0aGUgbnVtYmVyIG9mIHNwYWNlcyB0byBpbmRlbnQgdGhlIG91dHB1dCBieVxuICogQHBhcmFtIFtjaXJjdWxhclJlcGxhY2VyXSBhIGN1c3RvbSByZXBsYWNlciBmdW5jdGlvbiBmb3IgaGFuZGxpbmcgY2lyY3VsYXIgdmFsdWVzXG4gKiBAcmV0dXJucyB0aGUgc3RyaW5naWZpZWQgb3V0cHV0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemUodmFsdWUsIHJlcGxhY2VyLCBpbmRlbnQsIGNpcmN1bGFyUmVwbGFjZXIpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUsIGNyZWF0ZVJlcGxhY2VyKChrZXksIHZhbHVlXykgPT4ge1xuICAgICAgICBsZXQgdmFsdWUgPSB2YWx1ZV87XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdiaWdpbnQnKVxuICAgICAgICAgICAgdmFsdWUgPSB7IF9fdHlwZTogJ2JpZ2ludCcsIHZhbHVlOiB2YWx1ZV8udG9TdHJpbmcoKSB9O1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBNYXApXG4gICAgICAgICAgICB2YWx1ZSA9IHsgX190eXBlOiAnTWFwJywgdmFsdWU6IEFycmF5LmZyb20odmFsdWVfLmVudHJpZXMoKSkgfTtcbiAgICAgICAgcmV0dXJuIHJlcGxhY2VyPy4oa2V5LCB2YWx1ZSkgPz8gdmFsdWU7XG4gICAgfSwgY2lyY3VsYXJSZXBsYWNlciksIGluZGVudCA/PyB1bmRlZmluZWQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VyaWFsaXplLmpzLm1hcCJdLCJuYW1lcyI6WyJnZXRSZWZlcmVuY2VLZXkiLCJrZXlzIiwiY3V0b2ZmIiwic2xpY2UiLCJqb2luIiwiZ2V0Q3V0b2ZmIiwiYXJyYXkiLCJ2YWx1ZSIsImxlbmd0aCIsImluZGV4IiwiY3JlYXRlUmVwbGFjZXIiLCJyZXBsYWNlciIsImNpcmN1bGFyUmVwbGFjZXIiLCJoYXNSZXBsYWNlciIsImhhc0NpcmN1bGFyUmVwbGFjZXIiLCJjYWNoZSIsInJlcGxhY2UiLCJrZXkiLCJ0aGlzQ3V0b2ZmIiwic3BsaWNlIiwidmFsdWVDdXRvZmYiLCJjYWxsIiwic2VyaWFsaXplIiwiaW5kZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsInZhbHVlXyIsIl9fdHlwZSIsInRvU3RyaW5nIiwiTWFwIiwiQXJyYXkiLCJmcm9tIiwiZW50cmllcyIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/utils/serialize.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/utils/uid.js":
/*!****************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/utils/uid.js ***!
  \****************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   uid: () => (/* binding */ uid)\n/* harmony export */ });\nconst size = 256;\nlet index = size;\nlet buffer;\nfunction uid(length = 11) {\n    if (!buffer || index + length > size * 2) {\n        buffer = \"\";\n        index = 0;\n        for(let i = 0; i < size; i++){\n            buffer += (256 + Math.random() * 256 | 0).toString(16).substring(1);\n        }\n    }\n    return buffer.substring(index, index++ + length);\n} //# sourceMappingURL=uid.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdhZ21pK2NvcmVAMi4xOS4wX0B0YW5zdGFjaytxdWVyeS1jb3JlQDUuODUuM19AdHlwZXMrcmVhY3RAMTguMi4zN19yZWFjdEAxOC4yLjBfdHlwZXNjXzQwYzZiOTdhZjE5M2UzNGRiM2Q0YzAxOTMzMTQ0MzgzL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29yZS9kaXN0L2VzbS91dGlscy91aWQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLE9BQU87QUFDYixJQUFJQyxRQUFRRDtBQUNaLElBQUlFO0FBQ0csU0FBU0MsSUFBSUMsU0FBUyxFQUFFO0lBQzNCLElBQUksQ0FBQ0YsVUFBVUQsUUFBUUcsU0FBU0osT0FBTyxHQUFHO1FBQ3RDRSxTQUFTO1FBQ1RELFFBQVE7UUFDUixJQUFLLElBQUlJLElBQUksR0FBR0EsSUFBSUwsTUFBTUssSUFBSztZQUMzQkgsVUFBVSxDQUFDLE1BQU9JLEtBQUtDLE1BQU0sS0FBSyxNQUFPLEdBQUdDLFFBQVEsQ0FBQyxJQUFJQyxTQUFTLENBQUM7UUFDdkU7SUFDSjtJQUNBLE9BQU9QLE9BQU9PLFNBQVMsQ0FBQ1IsT0FBT0EsVUFBVUc7QUFDN0MsRUFDQSwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcGFjZS1qdW1wLWdhbWUvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdhZ21pK2NvcmVAMi4xOS4wX0B0YW5zdGFjaytxdWVyeS1jb3JlQDUuODUuM19AdHlwZXMrcmVhY3RAMTguMi4zN19yZWFjdEAxOC4yLjBfdHlwZXNjXzQwYzZiOTdhZjE5M2UzNGRiM2Q0YzAxOTMzMTQ0MzgzL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29yZS9kaXN0L2VzbS91dGlscy91aWQuanM/NDUxYiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBzaXplID0gMjU2O1xubGV0IGluZGV4ID0gc2l6ZTtcbmxldCBidWZmZXI7XG5leHBvcnQgZnVuY3Rpb24gdWlkKGxlbmd0aCA9IDExKSB7XG4gICAgaWYgKCFidWZmZXIgfHwgaW5kZXggKyBsZW5ndGggPiBzaXplICogMikge1xuICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemU7IGkrKykge1xuICAgICAgICAgICAgYnVmZmVyICs9ICgoMjU2ICsgTWF0aC5yYW5kb20oKSAqIDI1NikgfCAwKS50b1N0cmluZygxNikuc3Vic3RyaW5nKDEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBidWZmZXIuc3Vic3RyaW5nKGluZGV4LCBpbmRleCsrICsgbGVuZ3RoKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVpZC5qcy5tYXAiXSwibmFtZXMiOlsic2l6ZSIsImluZGV4IiwiYnVmZmVyIiwidWlkIiwibGVuZ3RoIiwiaSIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/utils/uid.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/version.js":
/*!**************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/version.js ***!
  \**************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\nconst version = \"2.19.0\"; //# sourceMappingURL=version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHdhZ21pK2NvcmVAMi4xOS4wX0B0YW5zdGFjaytxdWVyeS1jb3JlQDUuODUuM19AdHlwZXMrcmVhY3RAMTguMi4zN19yZWFjdEAxOC4yLjBfdHlwZXNjXzQwYzZiOTdhZjE5M2UzNGRiM2Q0YzAxOTMzMTQ0MzgzL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29yZS9kaXN0L2VzbS92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxVQUFVLFNBQVMsQ0FDaEMsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3BhY2UtanVtcC1nYW1lLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B3YWdtaStjb3JlQDIuMTkuMF9AdGFuc3RhY2srcXVlcnktY29yZUA1Ljg1LjNfQHR5cGVzK3JlYWN0QDE4LjIuMzdfcmVhY3RAMTguMi4wX3R5cGVzY180MGM2Yjk3YWYxOTNlMzRkYjNkNGMwMTkzMzE0NDM4My9ub2RlX21vZHVsZXMvQHdhZ21pL2NvcmUvZGlzdC9lc20vdmVyc2lvbi5qcz84ZWY2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCB2ZXJzaW9uID0gJzIuMTkuMCc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@wagmi+core@2.19.0_@tanstack+query-core@5.85.3_@types+react@18.2.37_react@18.2.0_typesc_40c6b97af193e34db3d4c01933144383/node_modules/@wagmi/core/dist/esm/version.js\n");

/***/ })

};
;